{"goal33_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal33_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal33_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal33_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal33_mult_zero": "Lemma mult_zero : forall (x : natural), mult x Zero = Zero.", "goal33_mult_succ": "Lemma mult_succ : forall (x y : natural), plus (mult x y) x = mult x (Succ y).", "goal33_mult_commut": "Lemma mult_commut : forall (x y : natural), mult x y = mult y x.", "goal33_distrib": "Lemma distrib : forall (x y z : natural), mult (plus x y) z = plus (mult x z) (mult y z).", "goal33_mult_assoc": "Lemma mult_assoc : forall (x y z : natural), mult (mult x y) z = mult x (mult y z).", "goal33_qfac_mult": "Lemma qfac_mult : forall (x y : natural), qfac x y = mult (qfac x (Succ Zero)) y.", "goal33_fac_eq_qfac": "Theorem fac_eq_qfac : forall (x : natural), eq (fac x) (qfac x (Succ Zero)).", "goal21_append_assoc": "Lemma append_assoc: forall l1 l2 l3,   append l1 (append l2 l3) = append (append l1 l2) l3.", "goal21_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal21_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rotate (len x) (append x y)) (append y x).", "goal7_plus_comm": "Theorem plus_comm: forall (n m: natural), plus n m = plus m n.", "goal7_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (len (qreva x y)) (plus (len x) (len y)).", "goal83_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal83_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal83_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rotate (len x) (append x y)) (append y x).", "goal32_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal32_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal32_rotate_len_append": "Lemma rotate_len_append : forall (x y : lst), rotate (len x) (append x y) = append y x.", "goal32_rotate_len": "Theorem rotate_len : forall (x : lst), eq (rotate (len x) x) x.", "goal79_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal79_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal79_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (append (rev x) y)) (append (rev y) x).", "goal34_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal34_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal34_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal34_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal34_plus_qmult": "Lemma plus_qmult : forall (x y z a : natural), plus (qmult x y z) a = qmult x y (plus z a).", "goal34_mult_eq_qmult": "Theorem mult_eq_qmult : forall (x : natural) (y : natural), eq (mult x y) (qmult x y Zero).", "goal18_append_assoc": "Lemma append_assoc: forall l1 l2 l3,   append l1 (append l2 l3) = append (append l1 l2) l3.", "goal18_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal18_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (append (rev x) y)) (append (rev y) x).", "goal17_lem2": "Lemma lem2: forall l n, Cons n (rev l) = rev (append l (Cons n Nil)).", "goal17_lem": "Lemma lem: forall l, rev (rev l) = l.", "goal17_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (rev (append x y))) (append (rev (rev x)) (rev (rev y)))."}