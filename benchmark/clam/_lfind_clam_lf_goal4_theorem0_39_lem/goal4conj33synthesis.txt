let synth (lf2:lst) (lf1:natural)  =
  lf1
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (lf1), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Zero), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (lf1)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double lf1, lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len lf2, lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len Nil, lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double Zero, lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Zero)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double lf1), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (lf1)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double Zero), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Zero)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double lf1)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double lf1), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (lf1, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (lf1, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double Zero)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double Zero), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Zero, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Zero, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (lf1), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (lf1), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double lf1)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double lf1)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (lf1), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (lf1), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (lf1), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (lf1), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Zero), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Zero), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double Zero)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double Zero)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Zero), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Zero), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Zero), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Zero), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (lf1)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (lf1)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double lf1, append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double lf1, append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (lf1)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (lf1)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double lf1, lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double lf1, Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double lf1)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (lf1)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double lf1, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (lf1)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double lf1, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (lf1)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (lf1)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double lf1, lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double lf1, Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len lf2, append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len lf2, append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len Nil, append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len Nil, append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double Zero, append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double Zero, append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Zero)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Zero)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len lf2, lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len lf2, Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len Nil, lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double Zero, lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Zero)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append Nil lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append lf2 lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append lf2 Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (len lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (len Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len Nil, Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append Nil Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double Zero, Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Zero)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double Zero)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (len lf2, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (len Nil, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double Zero, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (Zero)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len Nil, Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double Zero, Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Zero)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (len lf2, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (len Nil, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double Zero, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (Zero)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len lf2, lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len lf2, Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len Nil, lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double Zero, lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Zero)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (lf1))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (lf1))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double lf1), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double lf1), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (lf1)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (lf1)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (double lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (lf1, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (lf1, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (lf1), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (lf1), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (lf1)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (lf1)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (lf1))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (lf1))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double lf1), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double lf1), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (lf1)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (lf1)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (Succ (lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (Succ (lf1))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (double lf1), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (Succ (lf1)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (Succ (lf1))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (double lf1), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (Succ (lf1)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (lf1))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (lf1))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double lf1), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double lf1), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (lf1)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (lf1)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len lf2), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len lf2), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len Nil), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len Nil), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double Zero), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double Zero), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Zero)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Zero)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Zero))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Zero))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (len lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (Zero, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (Zero), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (len lf2, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (len lf2, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (len Nil, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (Zero)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (append Nil lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (append lf2 lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (append lf2 Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (len lf2), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (len lf2), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (len Nil), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double Zero), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (Zero)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (Zero))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (len Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (Zero, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (Zero), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (len Nil, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (append Nil Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (Zero)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (len Nil), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double Zero), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (Zero)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (Zero))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (double Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (Succ (Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (len lf2), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (len Nil), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (double Zero), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (Succ (Zero)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (Succ (Zero))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (len Nil), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double Zero), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (Zero)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (Zero))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (len lf2), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (len Nil), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (double Zero), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (Succ (Zero)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (Succ (Zero))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (len lf2), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (len lf2), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (len Nil), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double Zero), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (Zero)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (Zero))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append Nil (append Nil lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append Nil (append lf2 Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append (append Nil Nil) lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append lf2 (append Nil Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append (append Nil lf2) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  Succ (len (append (append lf2 Nil) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append Nil (append Nil lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append Nil (append lf2 Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append (append Nil Nil) lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append lf2 (append Nil Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append (append Nil lf2) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (lf1, append (append lf2 Nil) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (lf1)))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (lf1)))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double lf1)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double lf1)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (lf1))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (lf1))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, lf2)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, lf2)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Nil)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Nil)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (lf1))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (lf1))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double lf1), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double lf1), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len
    (Cons (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (double lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (double (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (len (Cons (lf1, lf2)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (len (Cons (lf1, Nil)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (Succ (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (double lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (Succ (lf1), lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (Succ (lf1), Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (Succ (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (double lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (double (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (lf1, Cons (lf1, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (lf1, Cons (lf1, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (lf1, Cons (Zero, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (lf1, Cons (Zero, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Zero, Cons (lf1, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Zero, Cons (lf1, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (Succ (lf1)), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (Succ (lf1)), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (double lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (double lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (Succ (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (double lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (double (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (len (Cons (lf1, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (len (Cons (lf1, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (Succ (lf1), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (Succ (lf1), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (Succ (Zero), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (lf1, Cons (Succ (Zero), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (Succ (lf1), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (Succ (lf1), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (lf1), Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (lf1), Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (lf1), Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (lf1), Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Zero), Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Zero), Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (Succ (lf1))), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (Succ (lf1))), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (double lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (double lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double (Succ (lf1)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double (Succ (lf1)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (Succ (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (double lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (double (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (len (Cons (lf1, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (len (Cons (lf1, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (Succ (lf1), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (Succ (lf1), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (lf1, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (lf1, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (lf1, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (lf1, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Zero, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Zero, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (Succ (lf1)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (Succ (lf1)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (double lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (double lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Zero, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (len lf2, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (len lf2, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (len Nil, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (double Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (Succ (Zero)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, append Nil lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, append lf2 lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, append lf2 Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (len Nil, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, append Nil Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (double Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Zero, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (lf1, Cons (Succ (Succ (Zero)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (lf1, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (lf1, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (lf1, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (lf1, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Zero, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Zero, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (Succ (lf1)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (Succ (lf1)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (double lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (double lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (Succ (lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (Succ (lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (Succ (Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (lf1), Cons (Succ (Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (Succ (lf1), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (Succ (lf1), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (lf1)), Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (lf1)), Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (lf1)), Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (lf1)), Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double lf1, Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double lf1, Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double lf1, Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double lf1, Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len lf2, Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len lf2, Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len Nil, Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len Nil, Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double Zero, Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double Zero, Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Zero)), Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Zero)), Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (Succ (lf1)))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (Succ (lf1)))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (double lf1)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (double lf1)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double (Succ (lf1))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double (Succ (lf1))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (lf1, lf2)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (lf1, lf2)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (lf1, Nil)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (lf1, Nil)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (Succ (lf1))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (Succ (lf1))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (double lf1), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (double lf1), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append lf2 (Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append lf2 (Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append Nil (Cons (lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append Nil (Cons (lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (lf1, lf2)) lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (lf1, lf2)) Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (lf1, Nil)) lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (lf1, Nil)) Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (double lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (double (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (len (Cons (lf1, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (len (Cons (lf1, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (Succ (lf1), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (Succ (lf1), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (lf1, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (lf1, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (lf1, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (lf1, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Zero, Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Zero, Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (Succ (lf1)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (Succ (lf1)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (double lf1, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (double lf1, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (Succ (Succ (lf1)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (double lf1)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (double (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (len (Cons (lf1, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (len (Cons (lf1, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (Succ (Succ (lf1))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (double lf1))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (lf1, append Nil Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (Succ (Succ (lf1)))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (double lf1)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (double (Succ (lf1))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (len (Cons (lf1, lf2)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (len (Cons (lf1, Nil)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (Succ (Succ (lf1))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (double lf1), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (append Nil (Cons (lf1, Nil))))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (append (Cons (lf1, Nil)) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (lf1, append Nil lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (lf1, append lf2 Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (Succ (Succ (lf1)))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (double lf1)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (double (Succ (lf1))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (len (Cons (lf1, lf2)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (len (Cons (lf1, Nil)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (Succ (Succ (lf1))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (double lf1), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append lf2 (Cons (lf1, Nil))))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append Nil (Cons (lf1, lf2))))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append (Cons (lf1, lf2)) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append (Cons (lf1, Nil)) lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil lf2) (Cons (lf1, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append lf2 Nil) (Cons (lf1, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil Nil) (Cons (lf1, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, lf2)) (append Nil Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, Nil)) (append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, Nil)) (append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, append Nil lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, append lf2 Nil)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (lf1, append Nil Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (Succ (lf1)))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (Succ (lf1)))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (double lf1)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (double lf1)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double (Succ (lf1))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double (Succ (lf1))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (lf1, lf2)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (lf1, lf2)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (lf1, Nil)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (lf1, Nil)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (Succ (lf1))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (Succ (lf1))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (double lf1), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (double lf1), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append lf2 (Cons (lf1, Nil))) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil (Cons (lf1, lf2))) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil (Cons (lf1, Nil))) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append (Cons (lf1, lf2)) Nil) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append (Cons (lf1, Nil)) lf2) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append (Cons (lf1, Nil)) Nil) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append Nil (append Nil lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append Nil (append lf2 Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append (append Nil Nil) lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append lf2 (append Nil Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append (append Nil lf2) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Zero, append (append lf2 Nil) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len lf2)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len lf2)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, lf2)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, lf2)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len lf2), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len lf2), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len Nil)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len Nil)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len Nil), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len Nil), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Nil)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Nil)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double Zero)), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double Zero)), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Zero))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Zero))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double Zero), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double Zero), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Zero))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Zero))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Zero)))), append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Zero)))), append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (len lf2)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (len (Cons (Zero, lf2)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (len lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (Succ (Zero), lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (len lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Zero, Cons (Zero, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (len lf2, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (len lf2, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (len Nil, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (double Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (Succ (Zero)), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (append Nil lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (append lf2 lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (append lf2 Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (len lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (len (Cons (Zero, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (Succ (Zero), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Zero), Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (len lf2), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (len lf2), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (len Nil), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (double Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double (Succ (Zero)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (Succ (Zero))), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (len lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (len (Cons (Zero, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (Succ (Zero), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Zero, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (len lf2, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (len lf2, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (len Nil, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (double Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (Succ (Zero)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, append Nil lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, append lf2 lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, append lf2 Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (Succ (Zero), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len lf2, Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len lf2, Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len Nil, Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double Zero, Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Zero)), Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (len lf2)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (len lf2)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (Zero, lf2)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (Zero, lf2)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (len lf2), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (len lf2), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (len Nil)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (len Nil), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (Zero, Nil)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (double Zero)), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double (Succ (Zero))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (double Zero), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (Succ (Zero))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (Succ (Zero)))), lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append Nil (Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (Zero, Nil)) lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append lf2 (Cons (Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append lf2 (Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (Zero, lf2)) lf2), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (Zero, lf2)) Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (len lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (len (Cons (Zero, lf2))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (Succ (Zero), lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Zero, Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (len lf2, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (len lf2, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (len Nil, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (double Zero, lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (Succ (Zero)), lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (append Nil lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (append lf2 lf2)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (append lf2 Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (len lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (len (Cons (Zero, lf2)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (len lf2))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (len Nil)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (len Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (len (Cons (Zero, Nil)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (len Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (len (Cons (Succ (Zero), Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (len Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (len (Cons (Zero, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (len Nil, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (append Nil Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (double Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Zero, Cons (Zero, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (len (Cons (Succ (Succ (Zero)), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (len Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (len (Cons (Zero, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (len (Cons (Succ (Zero), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (len Nil), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (double Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (double (Succ (Zero)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Zero, Cons (Succ (Zero), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Zero), Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (len (Cons (Succ (Succ (Succ (Zero))), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (len Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (len (Cons (Zero, Nil))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (len (Cons (Succ (Zero), Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (len Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (len Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (len (Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (len Nil, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (append Nil Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (double Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Zero, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (len (Cons (Succ (Succ (Zero)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (len Nil, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len Nil, Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (len Nil)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (len Nil), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (len (Cons (Zero, Nil)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, append Nil Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append Nil (Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (append (Cons (Zero, Nil)) Nil), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (double Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double Zero, Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (double Zero)), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (double (Succ (Zero))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (double Zero), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (double (Succ (Succ (Zero))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Zero, Cons (Zero, Nil)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Zero, Cons (Succ (Succ (Zero)), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Zero), Cons (Succ (Zero), Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Zero)), Cons (Zero, Nil))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (len (Cons (Succ (Succ (Succ (Succ (Zero)))), Nil)), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (Succ (double Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (Succ (double (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (double Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (Succ (double (Succ (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (double Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (double (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (Succ (double (Succ (Succ (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (double Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (double (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (double (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (Succ (double (Succ (Succ (Succ (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (double Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (double (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (double (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (double (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (Succ (double (Succ (Succ (Succ (Succ (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (double Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (double (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (double (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (double (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (double Zero)))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (double (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (double Zero))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (double (Succ (Succ (Zero))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (double (Succ (Succ (Succ (Succ (Zero)))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (Cons (double (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len
    (Cons (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))), lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Zero, append Nil lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Zero, append lf2 Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (len lf2)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (len (Cons (Zero, lf2)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (len lf2), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (len Nil)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (len Nil), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (len (Cons (Zero, Nil)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (double Zero)), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (double (Succ (Zero))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (double Zero), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (double (Succ (Succ (Zero))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (Cons (Succ (Succ (Succ (Succ (Zero)))), lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append Nil (Cons (Zero, lf2))))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append (Cons (Zero, Nil)) lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append lf2 (Cons (Zero, Nil))))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append Nil (append (Cons (Zero, lf2)) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, Nil)) (append Nil lf2))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, Nil)) (append lf2 Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil Nil) (Cons (Zero, lf2)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (len Nil)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (len Nil), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (Zero, Nil)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, append Nil Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil (Cons (Zero, Nil))) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append (Cons (Zero, Nil)) Nil) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (double Zero)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double (Succ (Zero))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (double Zero), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (Succ (Zero))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (Succ (Zero)))), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (len lf2)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (len (Cons (Zero, lf2)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (len lf2), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (len Nil)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (len Nil), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (len (Cons (Zero, Nil)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Zero, append Nil Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (append Nil (Cons (Zero, Nil))))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (append (Cons (Zero, Nil)) Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (double Zero)), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (double (Succ (Zero))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (double Zero), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (double (Succ (Succ (Zero))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append lf2 (Cons (Succ (Succ (Succ (Succ (Zero)))), Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, lf2)) (append Nil Nil))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil lf2) (Cons (Zero, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append lf2 Nil) (Cons (Zero, Nil)))
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, append Nil lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Zero, append lf2 Nil)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (len lf2)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (len lf2)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (Zero, lf2)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (Zero, lf2)), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (len lf2), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (len lf2), Nil)) lf2)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (len Nil)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (len Nil), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (len (Cons (Zero, Nil)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (double Zero)), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (double (Succ (Zero))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (double Zero), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (double (Succ (Succ (Zero))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (Cons (Succ (Succ (Succ (Succ (Zero)))), lf2)) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append Nil (Cons (Zero, lf2))) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append (Cons (Zero, Nil)) lf2) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append lf2 (Cons (Zero, Nil))) Nil)
;;
let synth (lf2:lst) (lf1:natural)  =
  len (append (append (Cons (Zero, lf2)) Nil) Nil)
;;
