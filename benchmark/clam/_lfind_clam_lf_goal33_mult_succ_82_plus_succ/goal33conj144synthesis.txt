let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult lf2 x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult x lf2)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult lf2 x) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x lf2) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult (Succ (y)) x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult x (Succ (y)))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus x (mult y (Succ (x)))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus x (mult (Succ (x)) y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult y (Succ (x))) x
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult (Succ (y)) x) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x (Succ (y))) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult (Succ (x)) y) x
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult lf2 (plus Zero x))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult lf2 (plus x Zero))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus Zero (mult lf2 x))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus Zero (mult x lf2))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult (plus Zero lf2) x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult (plus lf2 Zero) x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult x (plus Zero lf2))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult x (plus lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus x (mult y x))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus x (mult x y))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult (plus Zero x) lf2)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (mult (plus x Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus (mult lf2 x) Zero)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus (mult y x) x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus (mult x lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus y (plus (mult x y) x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus Zero (plus y (mult lf2 x))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus Zero (plus y (mult x lf2))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus Zero (plus (mult lf2 x) y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus Zero (plus (mult x lf2) y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus Zero y) (mult lf2 x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus Zero y) (mult x lf2)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y Zero) (mult lf2 x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y Zero) (mult x lf2)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus x (plus y (mult y x))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus x (plus y (mult x y))
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus x (plus (mult y x) y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus x (plus (mult x y) y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult lf2 x) (plus Zero y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult lf2 x) (plus y Zero)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult y x) (plus y x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult y x) (plus x y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y x) (mult y x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y x) (mult x y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x lf2) (plus Zero y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x lf2) (plus y Zero)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x y) (plus y x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x y) (plus x y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus x y) (mult y x)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus x y) (mult x y)
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult lf2 (plus Zero x)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult lf2 (plus x Zero)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y (mult lf2 x)) Zero
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y (mult y x)) x
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y (mult x lf2)) Zero
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus y (mult x y)) x
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus Zero (mult lf2 x)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus Zero (mult x lf2)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult (plus Zero lf2) x) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult (plus lf2 Zero) x) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x (plus Zero lf2)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult x (plus lf2 Zero)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus x (mult y x)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus x (mult x y)) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult (plus Zero x) lf2) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (mult (plus x Zero) lf2) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult lf2 x) y) Zero
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult lf2 x) Zero) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult y x) x) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult y x) y) x
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult x lf2) y) Zero
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult x lf2) Zero) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult x y) x) y
;;
let synth (y:natural) (lf2:natural) (x:natural)  =
  plus (plus (mult x y) y) x
;;
