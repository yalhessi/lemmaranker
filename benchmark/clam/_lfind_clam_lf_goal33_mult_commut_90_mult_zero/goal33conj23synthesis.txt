let synth (lf2:natural) (y:natural) (lf1:natural)  =
  lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (y))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (y))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (y))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult y lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus y lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf2 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf2 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult Zero lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus Zero lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf1 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf1 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf1 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf1 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf1 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf1 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf1 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf1 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (y)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (y)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf2)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf2)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (Zero)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (Zero)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf1 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf1 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf1)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf1)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf1)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf1)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf1)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf1)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf1)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf1)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (y))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (y))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf2))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf2))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (Zero))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (Zero))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf1 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf1 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf1)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf1)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf1))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf1))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf1))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf1))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf1))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf1))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf1))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf1))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (y)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (y)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf2)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf2)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (Zero)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (Zero)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf1 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf1 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf1)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf1)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf1))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf1))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf1)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf1)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf1)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf1)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf1)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf1)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf1)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf1)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf1))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf1))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf1)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf1)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf1))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult y lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus y lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf2 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf2 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult Zero lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus Zero lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf1 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf1 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf1 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf1 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf1 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf1 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf1 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf1 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (y)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (y)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf2)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf2)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (Zero)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (Zero)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf1 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf1 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf1)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf1)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf1)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf1)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf1)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf1)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf1)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf1)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (y))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (y))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf2))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf2))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (Zero))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (Zero))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf1 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf1 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf1)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf1)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf1))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf1))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf1))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf1))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf1))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf1))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf1))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf1))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (y)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (y)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf2)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf2)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (Zero)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (Zero)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf1 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf1 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf1)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf1)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf1))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf1))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf1)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf1)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf1)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf1)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf1)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf1)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf1)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf1)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf1))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf1))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf1)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf1)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf1))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf1))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y))))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult y lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus y lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf2 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf2 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult Zero lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus Zero lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf1 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf1 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf1 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf1 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf1 lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf1 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf1 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf1 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (y)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (y)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf2)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf2)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (Zero)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (Zero)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf1 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf1 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf1)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf1)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf1)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf1)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf1)) lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf1)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf1)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf1)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (y))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (y))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf2))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf2))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (Zero))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (Zero))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf1 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf1 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf1)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf1)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf1))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf1))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf1))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf1))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf1))) lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf1))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf1))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf1))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (y)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (y)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf2)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf2)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (Zero)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (Zero)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf1 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf1)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf1))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf1)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf1)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf1)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf1)))) lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf1)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf1)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf1)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf1)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf1))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf1))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf1)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf1)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf1))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf2 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf2 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult Zero y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus Zero y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult y y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult y lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult y Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus y y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus y lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus y Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf2)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf2)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (Zero)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (Zero)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult y (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus y (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (y)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (y)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (y)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (y)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (y)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (y)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf2))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf2))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (Zero))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (Zero))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult y (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus y (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (y)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (y)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (y))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (y))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (y))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (y))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (y))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (y))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf2)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf2)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (Zero)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (Zero)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus y (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (y)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (y))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (y)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (y)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (y)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (y)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (y)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (y)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf2))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (Zero))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult y (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus y (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (y)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (y)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (y))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (y))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (y)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (y)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (y))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (y))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult Zero lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus Zero lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf2 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult lf2 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf2 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus lf2 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (Zero)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (Zero)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult lf2 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus lf2 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf2)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (lf2)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf2)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (lf2)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (Zero))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (Zero))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult lf2 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus lf2 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (lf2)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (lf2)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf2))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (lf2))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf2))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (lf2))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (Zero)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (Zero)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus lf2 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (lf2)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (lf2))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf2)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf2)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (lf2)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (lf2)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (lf2))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (lf2))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (lf2)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (lf2)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (mult Zero Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult Zero (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (mult (Succ (Zero)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult Zero (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Zero)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (mult (Succ (Succ (Zero))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Zero))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Zero)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (plus Zero Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus Zero (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (plus (Succ (Zero)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus Zero (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Zero)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (plus (Succ (Succ (Zero))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Zero)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Zero))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (plus (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Zero))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Zero)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf1 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (y))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult y lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus lf2 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus Zero lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf1 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus lf1 lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus lf1 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus lf1 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf1 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf1) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 y) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 lf1) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 lf1) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 lf1) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 lf2) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 Zero) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf1 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (y)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (lf2)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (Zero)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf1 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (lf1)))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (lf1)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf1)) (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (y))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (lf2))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (Zero))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf1 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (lf1))) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (lf1))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (lf1))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf1))) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (y)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (lf2)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (Zero)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf1 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (lf1)) lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (lf1)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (lf1)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf1)))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf1))))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 y) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf1) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (Succ (lf1)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf1) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult y lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus lf2 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus Zero lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf1 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus lf1 lf1)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus lf1 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus lf1 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf1))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf1))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf1))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (y))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (lf2))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf1) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (Succ (lf1))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf1)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf1)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf1)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (y)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (lf2)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Zero)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf1) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (Succ (lf1)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf1))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf1))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf1))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (y))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (lf2))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Zero))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf1) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) (Succ (lf1))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf1))))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf1 Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf1 Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf1 (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf1 (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf1)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf1)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf1 (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf1 (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf1)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf1)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf1))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf1))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf1 (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf1)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf1))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf1)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (y)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf1)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf1)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (lf1))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (lf1))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (y))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf1))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (lf1)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (lf1)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (lf1)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (y)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (lf2)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (Zero)))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf1))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf1)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (lf1))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (lf1))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (lf1))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (y))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (lf2))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (Zero))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf1)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf1))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf1) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (lf1)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 lf1)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 lf1)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 lf1)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf1 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero y)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 lf2)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero Zero)) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) y) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf1) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) lf1) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) lf1) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) lf1) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) lf2) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) Zero) lf1
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf2 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf2 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult Zero y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus Zero y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult y y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult y lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult y Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus y y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus y lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus y Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf2)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf2)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (Zero)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (Zero)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult y (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus y (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (y)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (y)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (y)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (y)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (y)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (y)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf2))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf2))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (Zero))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (Zero))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult y (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus y (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (y)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (y)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (y))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (y))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (y))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (y))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (y))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (y))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf2)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf2)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (Zero)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (Zero)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult y (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus y (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (y)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (y)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (y))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (y))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (y)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (y)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (y)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (y)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (y)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (y)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf2))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (Zero))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult y (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus y (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (y)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (y)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (y))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (y))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (y)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (y)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (y))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (y))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf2 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf2 y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult Zero y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus Zero y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult y y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult y lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult y Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus y y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus y lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus y Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf2)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf2)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (Zero)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (Zero)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult y (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus y (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (y)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (y)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (y)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (y)) y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (y)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (y)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf2))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf2))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (Zero))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (Zero))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult y (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus y (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (y)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (y)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (y))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (y))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (y))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (y))) y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (y))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (y))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf2)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf2)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (Zero)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (Zero)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult y (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus y (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (y)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (y)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (y))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (y))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (y)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (y)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (y)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (y)))) y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (y)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (y)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf2))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf2))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (Zero))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (Zero))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult y (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus y (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (y)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (y)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (y))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (y))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (y)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (y)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (y))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (y))))) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus y y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf2 y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult Zero y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult y lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult y Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult y (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (y))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero y) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf2) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y Zero) y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero y) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero y) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult y Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult y (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (y)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (y))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (y))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (y))) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (y)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (y)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (y)))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (y))))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 y) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero y) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (Succ (y)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus y y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf2 y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult Zero y)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult y lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult y Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (y))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (y))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (Succ (y))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (y)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (y)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (Succ (y)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (y))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (y))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) (Succ (y))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y))))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (y))))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult y Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus y Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult y (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus y (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (y)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (y)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult y (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus y (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (y)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (y)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (y))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (y))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (y)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (y))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (y)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (y)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (y)))))) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero y)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf2)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero Zero)) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult y (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (y))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (y))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (y))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (y)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (y)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (y))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (y)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (y))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (y))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (y)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (y))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) y) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (y))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf2) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) Zero) y
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (y)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (y)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero y)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero y)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult y Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) y) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) y) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult Zero lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus Zero lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf2 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult lf2 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf2 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus lf2 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (Zero)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (Zero)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult lf2 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus lf2 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf2)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (lf2)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf2)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (lf2)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (Zero))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (Zero))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult lf2 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus lf2 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (lf2)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (lf2)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf2))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (lf2))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf2))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (lf2))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (Zero)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (Zero)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult lf2 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus lf2 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (lf2)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (lf2)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (lf2))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (lf2))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf2)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf2)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (lf2)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (lf2)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (lf2))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (lf2))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (lf2)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (lf2)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult Zero lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus Zero lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf2 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult lf2 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf2 lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus lf2 Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (Zero)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (Zero)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult lf2 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus lf2 (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf2)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (lf2)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf2)) lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (lf2)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (Zero))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (Zero))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult lf2 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus lf2 (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (lf2)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (lf2)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf2))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (lf2))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf2))) lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (lf2))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (Zero)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (Zero)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult lf2 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus lf2 (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (lf2)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (lf2)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (lf2))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (lf2))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf2)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf2)))) lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (lf2)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (lf2)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (lf2))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (lf2))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (lf2)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (lf2)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (mult Zero Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult Zero (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (mult (Succ (Zero)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult Zero (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Zero)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (mult (Succ (Succ (Zero))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Zero)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Zero))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (mult (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Zero)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Zero))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Zero)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (plus Zero Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus Zero (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (plus (Succ (Zero)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus Zero (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Zero)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (plus (Succ (Succ (Zero))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Zero)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Zero))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (plus (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Zero)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Zero))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Zero)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (plus (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult lf2 (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult lf2 (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus Zero lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus lf2 lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus lf2 Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus lf2 (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 lf2) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 lf2) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 Zero) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus lf2 Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus lf2 (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (Zero)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult lf2 (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (lf2)))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (lf2)) (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (Zero))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult lf2 (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (lf2))) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (lf2))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (lf2))) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (Zero)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult lf2 (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (lf2)) lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (lf2)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (lf2)))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (lf2))))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 lf2) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (Succ (lf2)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 lf2) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus Zero lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus lf2 lf2)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus lf2 Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (lf2))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (lf2))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Zero))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) lf2) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (Succ (lf2))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (lf2)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (lf2)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Zero)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) lf2) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (Succ (lf2)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (lf2))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (lf2))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Zero))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) lf2) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) (Succ (lf2))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (lf2))))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult lf2 Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus lf2 Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult lf2 (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus lf2 (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (lf2)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (lf2)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult lf2 (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus lf2 (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (lf2)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (lf2)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (lf2))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (lf2))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult lf2 (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus lf2 (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (lf2)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (lf2))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (lf2)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (lf2)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (lf2))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (lf2))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (Zero))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (lf2))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (lf2)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (lf2)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (Zero)))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (lf2))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (lf2)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (lf2))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (lf2))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (Zero))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (lf2)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (lf2))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (lf2)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 lf2)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 lf2)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus lf2 Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero Zero)) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus lf2 (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 lf2) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) lf2) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) lf2) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) Zero) lf2
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf2 Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (mult Zero Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult Zero (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (mult (Succ (Zero)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult Zero (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Zero)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (mult (Succ (Succ (Zero))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Zero)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Zero))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (mult (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (mult Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Zero)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Zero))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Zero)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (mult Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (plus Zero Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus Zero (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (plus (Succ (Zero)) Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus Zero (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Zero)) (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (plus (Succ (Succ (Zero))) Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Zero)) (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Zero))) (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (plus (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Zero)) (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Zero))) (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Zero)))) (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (plus (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult Zero (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero)))))))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult Zero (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Zero))) (mult (Succ (Succ (Zero))) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult Zero (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Zero)))) (mult (Succ (Zero)) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero Zero) (Succ (Succ (Succ (Succ (Zero)))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (mult Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Zero))))) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Zero))) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) Zero) (Succ (Succ (Succ (Zero))))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Zero)))) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) Zero) (Succ (Succ (Zero)))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Zero))))) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) Zero) (Succ (Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (mult Zero Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult Zero (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (mult (Succ (Zero)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult Zero (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Zero)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (mult (Succ (Succ (Zero))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (mult Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Zero))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Zero)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (mult Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (mult Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (plus Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (plus Zero Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus Zero (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (plus (Succ (Zero)) Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus Zero (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Zero)) (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (plus (Succ (Succ (Zero))) Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Zero)) (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Zero))) (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus (Succ (Succ (Succ (Zero)))) Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Succ (Succ (Succ (Zero)))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) (Succ (Succ (Succ (Zero))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Zero))) (Succ (Succ (Zero)))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Zero)))) (Succ (Zero))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (plus Zero Zero) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Succ (Succ (Succ (Zero))))) Zero) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Succ (Zero))))))))) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus Zero Zero))
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero Zero) Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus Zero Zero)
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero Zero)) Zero
;;
let synth (lf2:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) Zero) Zero
;;
