let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult z x)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult x z)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult z x) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult x z) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult z (plus Zero x))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult z (plus x Zero))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (plus Zero (mult z x))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (plus Zero (mult x z))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult (plus Zero z) x)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult (plus z Zero) x)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult x (plus Zero z))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult x (plus z Zero))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult (plus Zero x) z)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (mult (plus x Zero) z)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (plus (mult z x) Zero)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus lf1 (plus (mult x z) Zero)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus Zero (plus lf1 (mult z x))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus Zero (plus lf1 (mult x z))
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus Zero (plus (mult z x) lf1)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus Zero (plus (mult x z) lf1)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus Zero lf1) (mult z x)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus Zero lf1) (mult x z)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus lf1 Zero) (mult z x)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus lf1 Zero) (mult x z)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult z x) (plus Zero lf1)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult z x) (plus lf1 Zero)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult x z) (plus Zero lf1)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult x z) (plus lf1 Zero)
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult z (plus Zero x)) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult z (plus x Zero)) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus lf1 (mult z x)) Zero
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus lf1 (mult x z)) Zero
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus Zero (mult z x)) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus Zero (mult x z)) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult (plus Zero z) x) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult (plus z Zero) x) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult x (plus Zero z)) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult x (plus z Zero)) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult (plus Zero x) z) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (mult (plus x Zero) z) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus (mult z x) lf1) Zero
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus (mult z x) Zero) lf1
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus (mult x z) lf1) Zero
;;
let synth (lf1:natural) (z:natural) (x:natural)  =
  plus (plus (mult x z) Zero) lf1
;;
