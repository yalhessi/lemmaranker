{"goal24_lem": "Lemma lem: forall m n, even (plus m n) = negb (even (plus m (Succ n))).", "goal24_lem2": "Lemma lem2: forall n, plus n Zero = n.", "goal24_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural), eq (even (plus x y)) (even (plus y x)).", "goal45_Nat_beq_refl": "Lemma Nat_beq_refl : forall (n : natural), eqb n n = true.", "goal45_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst), eq (mem (insort  y x) x) true.", "goal1_lem": "Lemma lem: forall m n, Succ (plus m n) = plus m (Succ n).", "goal1_theorem0": "Theorem theorem0 : forall (x : natural), eq (double x) (plus x x).", "goal60_lem": "Lemma lem : forall (x : lst) (y : natural), eq (rev (append x (Cons y Nil))) (Cons y (rev x)).", "goal60_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst) (z : natural), eq (rev (append x (append y (Cons z Nil)))) (Cons z (rev (append x y))).", "goal83_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal83_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal83_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rotate (len x) (append x y)) (append y x).", "goal64_negb_invol": "Lemma negb_invol: forall b, negb (negb b) = b.", "goal64_theorem0": "Theorem theorem0 : forall (w : lst) (z : lst) (x : natural) (y : natural), eq (even (len (append w z))) (even (len (append w (Cons x (Cons y z))))).", "goal5_lem": "Lemma lem : forall l1 l2 n, Succ (len (append l1 l2)) = len (append l1 (Cons n l2)).", "goal5_lem2": "Lemma lem2 : forall l, len l = len (append l Nil).", "goal5_theorem0": "Theorem theorem0 : forall (x : lst), eq (len (rev x)) (len x).", "goal41_Nat_beq_refl": "Lemma Nat_beq_refl : forall (n : natural), eqb n n = true.", "goal41_append_single": "Lemma append_single : forall (x : lst) (n : natural), Cons n x = append (Cons n Nil) x.", "goal41_mem_append": "Lemma mem_append : forall (n : natural) (x y : lst), lst_mem n x = true -> lst_mem n (append y x) = true.", "goal41_subset_append_general": "Lemma subset_append_general : forall (x y z : lst), lst_subset x y = true -> lst_subset x (append z y) = true.", "goal41_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), lst_subset x y = true -> lst_eq (lst_intersection x y) x = true.", "goal20_lem": "Lemma lem: forall l1 l2 n, even (len (append l1 l2)) = negb (even (len (append l1 (Cons n l2)))).", "goal20_theorem0": "Theorem theorem0 : forall (x : lst), eq (even (len (append x x))) true.", "goal74_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : natural), eq (plus (plus x y) z) (plus x (plus y z)).", "goal15_lem": "Lemma lem: forall m n, Succ (plus m n) = plus m (Succ n).", "goal15_theorem0": "Theorem theorem0 : forall (x : natural), eq (plus x (Succ x)) (Succ (plus x x)).", "goal51_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural), eq (plus x (Succ y)) (Succ (plus x y)).", "goal30_append_nil": "Theorem append_nil: forall (l: lst), append l Nil = l.", "goal30_append_assoc": "Theorem append_assoc:   forall (l1 l2 l3: lst), append l1 (append l2 l3) = append (append l1 l2) l3.", "goal30_append_rev_cons": "Theorem append_rev_cons:   forall (l1 l2: lst) (x: natural),   rev (append l1 (Cons x l2)) = append (rev l2) (Cons x (rev l1)).", "goal30_rev_append": "Theorem rev_append: forall (l1 l2: lst), rev (append l1 l2) = append (rev l2) (rev l1).", "goal30_rev_involutive": "Theorem rev_involutive : forall (x : lst), eq (rev (rev x)) x.", "goal30_theorem0": "Theorem theorem0 : forall (x : lst), eq (rev (append (rev x) Nil)) x.", "goal34_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal34_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal34_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal34_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal34_plus_qmult": "Lemma plus_qmult : forall (x y z a : natural), plus (qmult x y z) a = qmult x y (plus z a).", "goal34_mult_eq_qmult": "Theorem mult_eq_qmult : forall (x : natural) (y : natural), eq (mult x y) (qmult x y Zero).", "goal55_theorem0": "Theorem theorem0 : forall (v : natural) (w : natural) (x : natural) (y : natural) (z : lst),  eq (drop (Succ v) (drop (Succ w) (Cons x (Cons y z)))) (drop (Succ v) (drop w (Cons x z))).", "goal11_append_assoc": "Lemma append_assoc: forall l1 l2 l3,   append l1 (append l2 l3) = append (append l1 l2) l3.", "goal11_lem": "Lemma lem: forall l n, Cons n (rev l) = rev (append l (Cons n Nil)).", "goal11_lem2": "Lemma lem2: forall l, rev (rev l) = l.", "goal11_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal11_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (append (rev x) (rev y))) (append y x).", "goal70_Nat_beq_refl": "Lemma Nat_beq_refl : forall (n : natural), eqb n n = true.", "goal70_Nat_beq_eq": "Lemma Nat_beq_eq : forall (x y : natural), eqb x y = true -> x = y.", "goal70_less_not_refl": "Lemma less_not_refl : forall (n : natural), less n n = false.", "goal70_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst), eq (count (insort y x) x) (Succ (count y x)).", "goal69_Nat_beq_eq": "Lemma Nat_beq_eq : forall (x y : natural), eqb x y = true -> x = y.", "goal69_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : lst), not (eq x y) -> eq (mem x (insort y z)) true -> eq (mem x z) true.", "goal84_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal84_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal84_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal84_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal84_mult_zero": "Lemma mult_zero : forall (x : natural), mult x Zero = Zero.", "goal84_mult_succ": "Lemma mult_succ : forall (x y : natural), plus (mult x y) x = mult x (Succ y).", "goal84_mult_commut": "Lemma mult_commut : forall (x y : natural), mult x y = mult y x.", "goal84_distrib": "Lemma distrib : forall (x y z : natural), mult (plus x y) z = plus (mult x z) (mult y z).", "goal84_mult_assoc": "Lemma mult_assoc : forall (x y z : natural), mult (mult x y) z = mult x (mult y z).", "goal84_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural), eq (mult (fac x) y) (qfac x y).", "goal63_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst) (z : natural), eq (append (append x y) (Cons z Nil)) (append x (append y (Cons z Nil))).", "goal27_append_nil": "Theorem append_nil: forall (l: lst), append l Nil = l.", "goal27_append_assoc": "Theorem append_assoc:   forall (l1 l2 l3: lst), append l1 (append l2 l3) = append (append l1 l2) l3.", "goal27_qreva_append": "Theorem qreva_append : forall (x y : lst), (qreva x y) = (append (rev x) y).", "goal27_theorem0": "Theorem theorem0 : forall (x : lst), eq (rev x) (qreva x Nil).", "goal8_drop_Nil": "Theorem drop_Nil: forall (x: natural), drop x Nil = Nil.", "goal8_drop_Cons": "Theorem drop_Cons: forall (x n: natural) (l: lst), drop (Succ x) (Cons n l) = drop x l.", "goal8_drop_Cons_assoc": "Theorem drop_Cons_assoc: forall (x1 x2 x3: natural) (l: lst),    drop x1 (drop x2 (Cons x3 l)) = drop x2 (drop x1 (Cons x3 l)).", "goal8_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : lst), eq (drop x (drop y z)) (drop y (drop x z)).", "goal2_lem": "Lemma lem : forall l1 l2 n, Succ (len (append l1 l2)) = len (append l1 (Cons n l2)).", "goal2_lem2": "Lemma lem2 : forall l, len l = len (append l Nil).", "goal2_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (len (append x y)) (len (append y x)).", "goal46_eqb_refl": "Theorem eqb_refl: forall n, eqb n n = true.", "goal46_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : lst), eq x y -> eq (mem (insort z y) x) true.", "goal29_append_nil": "Theorem append_nil: forall (l: lst), append l Nil = l.", "goal29_append_assoc": "Theorem append_assoc:   forall (l1 l2 l3: lst), append l1 (append l2 l3) = append (append l1 l2) l3.", "goal29_append_rev_cons": "Theorem append_rev_cons:   forall (l1 l2: lst) (x: natural),   rev (append l1 (Cons x l2)) = append (rev l2) (Cons x (rev l1)).", "goal29_rev_append": "Theorem rev_append: forall (l1 l2: lst), rev (append l1 l2) = append (rev l2) (rev l1).", "goal29_rev_involutive": "Theorem rev_involutive : forall (x : lst), eq (rev (rev x)) x.", "goal29_qreva_append": "Theorem qreva_append : forall (x y : lst), (qreva x y) = (append (rev x) y).", "goal29_rev_qreva_nil": "Theorem rev_qreva_nil : forall (x : lst), eq (rev x) (qreva x Nil).", "goal29_theorem0": "Theorem theorem0 : forall (x : lst), eq (rev (qreva x Nil)) x.", "goal42_Nat_beq_eq": "Lemma Nat_beq_eq : forall (x y : natural), eqb x y = true -> x = y.", "goal42_mem_union": "Lemma mem_union : forall (x : natural) (y z : lst), lst_mem x y = true -> lst_mem x (lst_union z y) = true.", "goal42_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst) (z : lst), eq (lst_mem x y) true -> eq (lst_mem x (lst_union y z)) true.", "goal6_len_append": "Theorem len_append: forall (l1 l2: lst), len (append l1 l2) = plus (len l1) (len l2).", "goal6_plus_comm": "Theorem plus_comm: forall (n m: natural), plus n m = plus m n.", "goal6_len_rev": "Theorem len_rev: forall (l: lst), len (rev l) = len l.", "goal6_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (len (rev (append x y))) (plus (len x) (len y)).", "goal48_theorem0": "Theorem theorem0 : forall (x : lst), eq (len (sort x)) (len x).", "goal23_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal23_lem2": "Lemma lem2: forall l1 l2 n, Succ (len (append l1 l2)) = len (append l1 (Cons n l2)).", "goal23_lem": "Lemma lem: forall l1 l2, len (append l1 l2) = len (append l2 l1).", "goal23_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (half (len (append x y))) (half (len (append y x))).", "goal80_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal80_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal80_rev_append": "Lemma rev_append : forall (x y : lst), rev (append x y) = append (rev y) (rev x).", "goal80_rev_rev": "Lemma rev_rev : forall (x : lst), rev (rev x) = x.", "goal80_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (append (rev x) (rev y))) (append y x).", "goal67_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural), eq (plus x (Succ (Succ y))) (Succ (Succ (plus x y))).", "goal39_theorem0": "Theorem theorem0 : forall (x : nat) (y : nat) (z : lst), mem x (drop y z) -> mem x z.", "goal52_theorem0": "Theorem theorem0 : forall (x : lst) (y : natural) (z : lst), eq (len (append x (Cons y z))) (Succ (len (append x z))).", "goal58_theorem0": "Theorem theorem0 : forall (x : lst) (y : natural), eq (rev (append x (Cons y Nil))) (Cons y (rev x)).", "goal33_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal33_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal33_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal33_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal33_mult_zero": "Lemma mult_zero : forall (x : natural), mult x Zero = Zero.", "goal33_mult_succ": "Lemma mult_succ : forall (x y : natural), plus (mult x y) x = mult x (Succ y).", "goal33_mult_commut": "Lemma mult_commut : forall (x y : natural), mult x y = mult y x.", "goal33_distrib": "Lemma distrib : forall (x y z : natural), mult (plus x y) z = plus (mult x z) (mult y z).", "goal33_mult_assoc": "Lemma mult_assoc : forall (x y z : natural), mult (mult x y) z = mult x (mult y z).", "goal33_qfac_mult": "Lemma qfac_mult : forall (x y : natural), qfac x y = mult (qfac x (Succ Zero)) y.", "goal33_fac_eq_qfac": "Theorem fac_eq_qfac : forall (x : natural), eq (fac x) (qfac x (Succ Zero)).", "goal77_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal77_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal77_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (qreva x y)) (append (rev y) x).", "goal16_lem": "Lemma lem: forall m n, even (plus m n) = negb (even (plus m (Succ n))).", "goal16_theorem0": "Theorem theorem0 : forall (x : natural), eq (even (plus x x)) true.", "goal79_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal79_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal79_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (append (rev x) y)) (append (rev y) x).", "goal12_append_assoc": "Lemma append_assoc: forall l1 l2 l3,   append l1 (append l2 l3) = append (append l1 l2) l3.", "goal12_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (qreva x y) (append (rev x) y).", "goal18_append_assoc": "Lemma append_assoc: forall l1 l2 l3,   append l1 (append l2 l3) = append (append l1 l2) l3.", "goal18_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal18_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (append (rev x) y)) (append (rev y) x).", "goal73_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : natural), eq (mult (mult x y) z) (mult x (mult y z)).", "goal37_theorem0": "Theorem theorem0 : forall (x : nat) (y : lst) (z : lst), mem x z -> mem x (append y z).", "goal56_lem": "Lemma lem: forall n1 n2 l, drop (Succ n1) (drop n2 l) = drop n1 (drop (Succ n2) l).", "goal56_theorem0": "Theorem theorem0 : forall (v : natural) (w : natural) (x : natural) (y : natural) (z : lst), eq (drop (Succ v) (drop w (drop x (Cons y z)))) (drop v (drop w (drop x z))).", "goal62_not_less": "Lemma not_less : forall (x y : natural), less x y = false -> leq y x = true.", "goal62_theorem0": "Theorem theorem0 : forall (x : lst) (y : natural), eq (sorted x) true -> eq (sorted (insort y x)) true.", "goal85_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal85_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal85_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal85_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal85_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : natural), eq (plus (mult x y) z) (qmult x y z).", "goal68_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst), eq (len (insort x y)) (Succ (len y)).", "goal47_eqb_refl": "Theorem eqb_refl: forall n, eqb n n = true.", "goal47_eqb_not_eq": "Theorem eqb_not_eq: forall n m, n <> m -> eqb n m = false.", "goal47_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : lst), not (eq x y) -> eq (mem (insort z y) x) (mem z x).", "goal3_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (len (append x y)) (plus (len x) (len y)).", "goal9_drop_Nil": "Theorem drop_Nil: forall (x: natural), drop x Nil = Nil.", "goal9_drop_Cons_assoc": "Theorem drop_Cons_assoc: forall (x1 x2 x3: natural) (l: lst),    drop x1 (drop x2 (Cons x3 l)) = drop x2 (drop x1 (Cons x3 l)).", "goal9_drop_assoc": "Theorem drop_assoc : forall (x : natural) (y : natural) (z : lst), eq (drop x (drop y z)) (drop y (drop x z)).", "goal9_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (w : natural) (z : lst), eq (drop w (drop x (drop y z))) (drop y (drop x (drop w z))).", "goal26_plus_comm": "Theorem plus_comm: forall (n m: natural), plus n m = plus m n.", "goal26_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural), eq (half (plus x y)) (half (plus y x)).", "goal22_lem": "Lemma lem: forall l1 l2 n, negb (even (len (append l1 l2))) = even (len (append l1 (Cons n l2))).", "goal22_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal22_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (even (len (append x y))) (even (len (append y x))).", "goal49_eqb_elim": "Theorem eqb_elim: forall (x y: natural), Bool.Is_true (eqb x y) -> x = y.", "goal49_eqb_refl": "Theorem eqb_refl: forall n, eqb n n = true.", "goal49_mem_cons": "Theorem mem_cons: forall (x n: natural) (l: lst), mem x (Cons n l) = true -> x = n \\/ mem x l = true.", "goal49_mem_insort": "Theorem mem_insort: forall (x n: natural) (l: lst), mem x (insort n l) = true -> x = n \\/ mem x l = true.", "goal49_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst), eq (mem x (sort y)) true -> eq (mem x y) true.", "goal7_plus_comm": "Theorem plus_comm: forall (n m: natural), plus n m = plus m n.", "goal7_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (len (qreva x y)) (plus (len x) (len y)).", "goal43_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst) (z : lst), eq (lst_mem x y) true -> eq (lst_mem x (lst_union z y)) true.", "goal28_append_nil": "Theorem append_nil: forall (l: lst), append l Nil = l.", "goal28_append_assoc": "Theorem append_assoc:   forall (l1 l2 l3: lst), append l1 (append l2 l3) = append (append l1 l2) l3.", "goal28_qrevflat_append": "Theorem qrevflat_append: forall (x : tree) (y: lst), append (revflat x) y = qrevaflat x y.", "goal28_theorem0": "Theorem theorem0 : forall (x : tree), eq (revflat x) (qrevaflat x Nil).", "goal66_negb_invol": "Lemma negb_invol: forall b, negb (negb b) = b.", "goal66_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural), eq (even (plus x y)) (even (plus x (Succ (Succ y)))).", "goal81_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal81_qreva_rev": "Lemma qreva_rev : forall (x y : lst), qreva x y = append (rev x) y.", "goal81_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (qreva (qreva x y) Nil) (append (rev y) x).", "goal32_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal32_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal32_rotate_len_append": "Lemma rotate_len_append : forall (x y : lst), rotate (len x) (append x y) = append y x.", "goal32_rotate_len": "Theorem rotate_len : forall (x : lst), eq (rotate (len x) x) x.", "goal59_lem": "Lemma lem : forall (x : lst) (y : natural), eq (rev (append x (Cons y Nil))) (Cons y (rev x)).", "goal59_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst) (z : natural), eq (rev (append x (append y (Cons z Nil)))) (Cons z (rev (append x y))).", "goal53_theorem0": "Theorem theorem0 : forall (x : lst) (y : natural), eq (len (append x (Cons y Nil))) (Succ (len x)).", "goal38_goal36": "Theorem goal36 : forall (x : natural) (y : lst) (z : lst), mem y x = true -> mem (append y z) x = true.", "goal38_goal37": "Theorem goal37 : forall (x : natural) (y : lst) (z : lst), mem z x = true -> mem (append y z) x = true.", "goal38_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst) (z : lst), mem y x = true \\/ mem z x = true -> mem (append y z) x = true.", "goal17_lem2": "Lemma lem2: forall l n, Cons n (rev l) = rev (append l (Cons n Nil)).", "goal17_lem": "Lemma lem: forall l, rev (rev l) = l.", "goal17_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (rev (append x y))) (append (rev (rev x)) (rev (rev y))).", "goal76_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal76_theorem0": "Theorem theorem0 : forall (x : tree) (y : lst), eq (append (revflat x) y) (qrevaflat x y).", "goal72_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst) (z : lst), eq (append (append x y) z) (append x (append y z)).", "goal19_lem": "Lemma lem: forall l n, Cons n (rev l) = rev (append l (Cons n Nil)).", "goal19_lem2": "Lemma lem2: forall l, rev (rev l) = l.", "goal19_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (append (rev (rev x)) y) (rev (rev (append x y))).", "goal13_lem": "Lemma lem: forall m n, plus (Succ m) n = plus m (Succ n).", "goal13_theorem0": "Theorem theorem0 : forall (x : natural), eq (half (plus x x)) x.", "goal78_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal78_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal78_rev_append": "Lemma rev_append : forall (x y : lst), rev (append x y) = append (rev y) (rev x).", "goal78_rev_rev": "Lemma rev_rev : forall (x : lst), rev (rev x) = x.", "goal78_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rev (qreva x (rev y))) (append y x).", "goal57_lem": "Lemma lem: forall n1 n2 l, drop (Succ n1) (drop n2 l) = drop n1 (drop (Succ n2) l).", "goal57_theorem0": "Theorem theorem0 : forall (u : natural) (v : natural) (w : natural) (x : natural) (y : natural) (z : lst),  eq (drop (Succ u) (drop v (drop (Succ w) (Cons x (Cons y z))))) (drop (Succ u) (drop v (drop w (Cons x z)))).", "goal36_mem_append": "Theorem mem_append : forall (x : nat) (y : lst) (z : lst), mem x y -> mem x (append y z).", "goal44_Nat_beq_eq": "Lemma Nat_beq_eq : forall (x y : natural), eqb x y = true -> x = y.", "goal44_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst) (z : lst), and (eq (lst_mem x y) true) (eq (lst_mem x z) true) -> eq (lst_mem x (lst_intersection y z)) true.", "goal25_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (even (len (append x y))) (even (plus (len x) (len y))).", "goal61_theorem0": "Theorem theorem0 : forall (x : lst) (y : natural) (z : lst), eq (append (append x (Cons y Nil)) z) (append x (Cons y z)).", "goal86_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal86_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal86_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal86_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal86_mult_zero": "Lemma mult_zero : forall (x : natural), mult x Zero = Zero.", "goal86_mult_succ": "Lemma mult_succ : forall (x y : natural), plus (mult x y) x = mult x (Succ y).", "goal86_mult_commut": "Lemma mult_commut : forall (x y : natural), mult x y = mult y x.", "goal86_distrib": "Lemma distrib : forall (x y z : natural), mult (plus x y) z = plus (mult x z) (mult y z).", "goal86_mult_assoc": "Lemma mult_assoc : forall (x y z : natural), mult (mult x y) z = mult x (mult y z).", "goal86_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : natural), eq (mult (exp x y) z) (qexp x y z).", "goal65_theorem0": "Theorem theorem0 : forall (w : lst) (x : natural) (y : natural) (z : lst), eq (len (append w (Cons x (Cons y z)))) (Succ (Succ (len (append w z)))).", "goal82_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal82_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal82_rev_append": "Lemma rev_append : forall (x y : lst), rev (append x y) = append (rev y) (rev x).", "goal82_rev_rev": "Lemma rev_rev : forall (x : lst), rev (rev x) = x.", "goal82_qreva_rev": "Lemma qreva_rev : forall (x y : lst), qreva x y = append (rev x) y.", "goal82_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (qreva (qreva x (rev y)) Nil) (append y x).", "goal21_append_assoc": "Lemma append_assoc: forall l1 l2 l3,   append l1 (append l2 l3) = append (append l1 l2) l3.", "goal21_lem3": "Lemma lem3: forall l, append l Nil = l.", "goal21_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (rotate (len x) (append x y)) (append y x).", "goal40_Nat_beq_refl": "Lemma Nat_beq_refl : forall (n : natural), eqb n n = true.", "goal40_append_single": "Lemma append_single : forall (x : lst) (n : natural), Cons n x = append (Cons n Nil) x.", "goal40_append_cons": "Lemma append_cons : forall (x y : lst) (n : natural), append x (Cons n y) = append (append x (Cons n Nil)) y.", "goal40_subset_append": "Lemma subset_append : forall (x y : lst), lst_subset x (append y x) = true.", "goal40_subset_refl": "Lemma subset_refl : forall (x : lst), lst_subset x x = true.", "goal40_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), lst_subset x y = true -> lst_eq (lst_union x y) y = true.", "goal4_lem": "Lemma lem : forall l1 l2 n, Succ (len (append l1 l2)) = len (append l1 (Cons n l2)).", "goal4_theorem0": "Theorem theorem0 : forall (x : lst), eq (len (append x x)) (double (len x)).", "goal14_lem2": "Lemma lem2: forall m n, less m n = false -> leq n m = true.", "goal14_lem3": "Lemma lem3: forall n0 n l, sorted (Cons n l) = true -> leq n0 n = true ->     sorted (Cons n0 (Cons n l)) = true.", "goal14_lem": "Lemma lem: forall n l, sorted l = true -> sorted (insort n l) = true.", "goal14_theorem0": "Theorem theorem0 : forall (x : lst), eq (sorted (sort x)) true.", "goal75_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal75_theorem0": "Theorem theorem0 : forall (x : lst) (y : lst), eq (append (rev x) y) (qreva x y).", "goal31_append_assoc": "Lemma append_assoc : forall (x y z : lst), append (append x y) z = append x (append y z).", "goal31_append_nil": "Lemma append_nil : forall (x : lst), append x Nil = x.", "goal31_qreva_nil": "Lemma qreva_nil : forall (x y : lst), qreva x y = append (qreva x Nil) y.", "goal31_qreva_append": "Lemma qreva_append : forall (x y : lst), qreva (append x y) Nil = append (qreva y Nil) (qreva x Nil).", "goal31_qreva_qreva": "Theorem qreva_qreva : forall (x : lst), eq (qreva (qreva x Nil) Nil) x.", "goal50_eqb_refl": "Theorem eqb_refl: forall n, eqb n n = true.", "goal50_eqb_diff": "Theorem eqb_diff: forall (x y: natural), x <> y -> eqb x y = false.", "goal50_eqb_elim": "Theorem eqb_elim: forall (x y: natural), Bool.Is_true (eqb x y) -> x = y.", "goal50_count_cons": "Theorem count_cons: forall (x: natural) (l: lst), count (Cons x l) x = Succ (count l x).", "goal50_count_insort": "Theorem count_insort: forall (x: natural) (l: lst), count (insort l x) x= Succ (count l x).", "goal50_count_cons_diff": "Theorem count_cons_diff: forall (x y: natural) (l: lst), x <> y -> count (Cons y l) x= count l x.", "goal50_count_insort_diff": "Theorem count_insort_diff: forall (x y: natural) (l: lst), x <> y -> count (insort l y) x= count l x.", "goal50_theorem0": "Theorem theorem0 : forall (x : natural) (y : lst), eq (count (sort y) x) (count y x).", "goal54_lem": "Lemma lem: forall n1 n2 l, drop (Succ n1) (drop n2 l) = drop n1 (drop (Succ n2) l).", "goal54_theorem0": "Theorem theorem0 : forall (w : natural) (x : natural) (y : natural) (z : lst), eq (drop (Succ w) (drop x (Cons y z))) (drop w (drop x z)).", "goal35_plus_succ": "Lemma plus_succ : forall (x y : natural), plus x (Succ y) = Succ (plus x y).", "goal35_plus_assoc": "Lemma plus_assoc : forall (x y z : natural), plus (plus x y) z = plus x (plus y z).", "goal35_plus_zero": "Lemma plus_zero : forall (x : natural), plus x Zero = x.", "goal35_plus_commut": "Lemma plus_commut : forall (x y : natural), plus x y = plus y x.", "goal35_mult_zero": "Lemma mult_zero : forall (x : natural), mult x Zero = Zero.", "goal35_mult_succ": "Lemma mult_succ : forall (x y : natural), plus (mult x y) x = mult x (Succ y).", "goal35_mult_commut": "Lemma mult_commut : forall (x y : natural), mult x y = mult y x.", "goal35_distrib": "Lemma distrib : forall (x y z : natural), mult (plus x y) z = plus (mult x z) (mult y z).", "goal35_mult_assoc": "Lemma mult_assoc : forall (x y z : natural), mult (mult x y) z = mult x (mult y z).", "goal35_mult_qexp": "Theorem mult_qexp : forall (x y z a : natural), mult (qexp x y z) a = qexp x y (mult z a).", "goal35_exp_eq_qexp": "Theorem exp_eq_qexp : forall (x : natural) (y : natural), eq (exp x y) (qexp x y (Succ Zero)).", "goal71_Nat_beq_eq": "Lemma Nat_beq_eq : forall (x y : natural), eqb x y = true -> x = y.", "goal71_theorem0": "Theorem theorem0 : forall (x : natural) (y : natural) (z : lst), not (eq x y) -> eq (count x (insort y z)) (count x z).", "goal10_append_Nil": "Theorem append_Nil: forall (l: lst), append l Nil = l.", "goal10_append_assoc": "Theorem append_assoc:  forall (l1 l2 l3: lst), append l1 (append l2 l3) = append (append l1 l2) l3.", "goal10_append_rev_Cons": "Theorem append_rev_Cons:  forall (l1 l2: lst) (x: natural),    rev (append l1 (Cons x l2)) = append (rev l2) (Cons x (rev l1)).", "goal10_rev_append": "Theorem rev_append: forall (l1 l2: lst), rev (append l1 l2) = append (rev l2) (rev l1).", "goal10_theorem0": "Theorem theorem0 : forall (x : lst), eq (rev (rev x)) x."}