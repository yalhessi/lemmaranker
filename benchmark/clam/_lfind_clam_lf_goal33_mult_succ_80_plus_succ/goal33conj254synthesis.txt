let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y x) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult (Succ (Zero)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult lf1 (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x (Succ (Zero))) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Zero)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (mult x (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus x lf1) (Succ (Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus lf1 x) (Succ (Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Zero))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (Succ (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (Succ (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (plus Zero (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (plus (Succ (Zero)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (plus y (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (plus (Succ (y)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult x (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero x) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus x Zero) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (y))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Zero))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x (Succ (y))) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (Succ (mult (Succ (Zero)) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (Succ (mult y (Succ (Zero))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (mult (Succ (Zero)) (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult x (mult (Succ (y)) (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult x (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) x) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult x (Succ (Zero))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Zero)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult x (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult x (Succ (y))) (Succ (Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) x) (Succ (Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Zero)))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (y))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Zero))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero (plus Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero (plus lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult Zero y) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult y Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult Zero x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult x Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult Zero Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus Zero Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (mult Zero Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (plus Zero Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult Zero lf1) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus Zero lf1) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult lf1 Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus lf1 Zero) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x (plus Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x (plus lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus x Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus x lf1) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero x) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero x) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) (plus Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) (plus lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x Zero) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x Zero) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) (plus Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) (plus lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult Zero y)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult y Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero x)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus x Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult Zero x)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult x Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult Zero Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus Zero Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero x) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero x) Zero) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult x Zero) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x Zero) Zero) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult y Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (mult Zero Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (plus Zero Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero x) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (mult x Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus x Zero) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult Zero y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult y Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (mult Zero Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (plus Zero Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult Zero y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult y Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (mult Zero Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (plus Zero Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult Zero lf1)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus Zero lf1)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult lf1 Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus lf1 Zero)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus x lf1)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf1)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 x)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero x) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero x) lf1) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult x Zero) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x Zero) lf1) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf1)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult y Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero x)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero x)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult x Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus x Zero)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x lf1) Zero) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 x) Zero) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult x (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult x (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero (mult x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero (mult y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult (plus Zero x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult (plus x Zero) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult y (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult y (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult (plus Zero y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult (plus y Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult x y) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult y x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x (mult x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x (mult y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult x y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (mult y x) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) (mult x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) (mult y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) (mult x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) (mult y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x y) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x y) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y x) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y x) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x (plus Zero y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x (plus y Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult x y)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult y x)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult x y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (mult y x)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero x) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus x Zero) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus Zero x)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y (plus x Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus Zero y) x) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (plus y Zero) x) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult x y) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult x y) Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y x) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y x) Zero) x
;;
