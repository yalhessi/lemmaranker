let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (Succ (x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (x)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus Zero lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y Zero) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 Zero) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult y x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult x y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y x) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x y) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (mult (Succ (Zero)) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (mult lf2 (Succ (Zero)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (Zero)) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (Zero)) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult (Succ (Zero)) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult y (Succ (Zero))) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (mult (Succ (Zero)) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (mult y (Succ (Zero)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult y lf2) (Succ (Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult lf2 y) (Succ (Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult (Succ (Zero)) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult lf2 (Succ (Zero))) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (Succ (plus Zero x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (Succ (plus x Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus Zero (Succ (x)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (Succ (Zero)) x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus x (Succ (Zero)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (Succ (x)) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult y (Succ (x)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult (Succ (x)) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero y) (Succ (x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y Zero) (Succ (x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (x)) (plus Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (x)) (plus y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (plus Zero x)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (plus x Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero (Succ (x))) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (Succ (Zero)) x) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus x (Succ (Zero))) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (Succ (x)) Zero) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y (Succ (x))) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (Succ (x)) y) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (Succ (mult (Succ (Zero)) x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (Succ (mult x (Succ (Zero))))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (mult (Succ (Zero)) (Succ (x)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (mult (Succ (x)) (Succ (Zero)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (Zero)) (mult y (Succ (x)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (Zero)) (mult (Succ (x)) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult (Succ (Zero)) y) (Succ (x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult y (Succ (Zero))) (Succ (x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (x)) (mult (Succ (Zero)) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (x)) (mult y (Succ (Zero)))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult y (Succ (x))) (Succ (Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult (Succ (x)) y) (Succ (Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (mult (Succ (Zero)) x)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (Succ (mult x (Succ (Zero)))) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult (Succ (Zero)) (Succ (x))) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (mult (Succ (x)) (Succ (Zero))) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus Zero (plus Zero lf2))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus Zero (plus lf2 Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult Zero x) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult x Zero) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult Zero y) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult y Zero) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult Zero Zero) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (plus Zero Zero) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult Zero lf2))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult lf2 Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult Zero x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult x Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult Zero y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult y Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (mult Zero Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus lf2 (plus Zero Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult Zero lf2) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (plus Zero lf2) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (mult lf2 Zero) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult y (plus (plus lf2 Zero) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult y (plus Zero lf2))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult y (plus lf2 Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus Zero (mult y lf2))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus Zero (mult lf2 y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult (plus Zero y) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult (plus y Zero) lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult lf2 (plus Zero y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult lf2 (plus y Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult (plus Zero lf2) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (mult (plus lf2 Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus (mult y lf2) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus (mult lf2 y) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero x) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero x) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x Zero) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x Zero) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero y) (plus Zero lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero y) (plus lf2 Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y Zero) (plus Zero lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y Zero) (plus lf2 Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero y) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero y) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y Zero) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y Zero) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero Zero) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero Zero) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero Zero) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero Zero) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult Zero x)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult x Zero)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero x) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult x Zero) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero (plus Zero y)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero (plus y Zero)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero Zero) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (plus Zero Zero) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult Zero y)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult y Zero)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult Zero Zero)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (plus Zero Zero)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero y) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (plus Zero y) Zero) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult y Zero) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (plus y Zero) Zero) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult Zero lf2))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult lf2 Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult Zero lf2) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult lf2 Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult Zero x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult x Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult Zero x) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult x Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus Zero (plus Zero y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus Zero (plus y Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult Zero Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (plus Zero Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult Zero y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult y Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (mult Zero Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus y (plus Zero Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult Zero y) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (plus Zero y) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (mult y Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult lf2 (plus (plus y Zero) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero lf2) (plus Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero lf2) (plus y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 Zero) (plus Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 Zero) (plus y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult Zero lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult lf2 Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult Zero x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult x Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (mult Zero Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y lf2) (plus Zero Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero lf2) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult Zero lf2) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult Zero lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult lf2 Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult Zero x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult x Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (mult Zero Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 y) (plus Zero Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 Zero) (mult y lf2)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 Zero) (mult lf2 y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult Zero lf2)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus y (mult lf2 Zero)) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero (plus Zero lf2)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus Zero (plus lf2 Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero x) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult x Zero) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero y) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult y Zero) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero Zero) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (plus Zero Zero) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult Zero lf2)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult lf2 Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult Zero x)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult x Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult Zero y)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult y Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (mult Zero Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus lf2 (plus Zero Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero lf2) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult Zero lf2) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (plus Zero lf2) Zero) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult lf2 Zero) lf2) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (mult lf2 Zero) y) lf2
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  mult (plus (plus lf2 Zero) Zero) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y (plus Zero lf2)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y (plus lf2 Zero)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero (mult y lf2)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero (mult lf2 y)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus Zero y) lf2) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus y Zero) lf2) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 (plus Zero y)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult lf2 (plus y Zero)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus Zero lf2) y) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus lf2 Zero) y) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus (mult y lf2) Zero) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus (mult lf2 y) Zero) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult y (plus Zero x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult y (plus x Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (plus Zero (mult y x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (plus Zero (mult x y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult (plus Zero y) x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult (plus y Zero) x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult x (plus Zero y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult x (plus y Zero))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult (plus Zero x) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (mult (plus x Zero) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (plus (mult y x) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus y (plus (mult x y) Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus y (mult y x))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus y (mult x y))
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus (mult y x) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus Zero (plus (mult x y) y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero y) (mult y x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero y) (mult x y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus y Zero) (mult y x)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus y Zero) (mult x y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y x) (plus Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y x) (plus y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x y) (plus Zero y)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x y) (plus y Zero)
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y (plus Zero x)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult y (plus x Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus y (mult y x)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus y (mult x y)) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero (mult y x)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus Zero (mult x y)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus Zero y) x) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus y Zero) x) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x (plus Zero y)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult x (plus y Zero)) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus Zero x) y) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (mult (plus x Zero) y) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus (mult y x) y) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus (mult y x) Zero) y
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus (mult x y) y) Zero
;;
let synth (y:natural) (x:natural) (lf2:natural)  =
  plus (plus (mult x y) Zero) y
;;
