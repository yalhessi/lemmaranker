let synth (y:natural) (lf2:natural) (lf1:natural)  =
  lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (Succ (lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (y)) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (Succ (y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (lf2)) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (mult (Succ (Zero)) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (mult lf1 (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf2))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (y))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (y)) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Zero))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (plus Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus Zero (Succ (Zero))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (plus Zero (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (plus (Succ (Zero)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (lf1)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf1)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (lf2)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (y)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Zero)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus Zero lf1) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus lf1 Zero) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (lf1))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Zero))) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (Succ (plus Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (Succ (plus lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (plus Zero (Succ (lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (plus (Succ (Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (plus lf2 (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (plus (Succ (lf2)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (Succ (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (Succ (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus y (Succ (lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (Succ (y)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf2 (Succ (y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (Succ (lf2)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (y)) (plus Zero lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (y)) (plus lf2 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (Zero)) (plus y lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (Zero)) (plus lf2 y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero y) (Succ (lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus y Zero) (Succ (lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (plus Zero y)) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (plus y Zero)) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (Succ (y))) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (Succ (Zero)) y) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus y (Succ (Zero))) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (Succ (y)) Zero) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (Succ (plus Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (Succ (plus y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (plus Zero (Succ (y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (plus (Succ (Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (plus y (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (plus (Succ (y)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (lf2)) (plus Zero y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (lf2)) (plus y Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus y lf2) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf2) (Succ (y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf2 y) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf2 Zero) (Succ (y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (plus y lf2)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (plus Zero lf2)) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (plus lf2 y)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (plus lf2 Zero)) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus y (Succ (lf2))) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (Succ (lf2))) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (Succ (y)) lf2) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (Succ (Zero)) lf2) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf2 (Succ (y))) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf2 (Succ (Zero))) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (Succ (lf2)) y) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (Succ (lf2)) Zero) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (Zero)) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult lf1 (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf2)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf2)) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf2)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf2))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (y)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (y)) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (y)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (y))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Zero)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Zero))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Zero)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (Zero))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (lf1))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf1)) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (lf2))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (lf2)) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (y))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (y)) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Zero))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Zero)) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (mult (Succ (Zero)) (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (lf1))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf1))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (lf2))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (lf2))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (y))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (y))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Zero))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Zero))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) lf1) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (mult lf1 (Succ (Zero))) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (lf1)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (lf1)) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (lf1)))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (lf1))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (Succ (mult (Succ (Zero)) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (Succ (mult lf2 (Succ (Zero))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (mult (Succ (Zero)) (Succ (lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus y (mult (Succ (lf2)) (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (y)) (mult (Succ (Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (y)) (mult lf2 (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (Succ (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (Succ (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus y (Succ (lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus (Succ (y)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf2 (Succ (y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus (Succ (lf2)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) y) (Succ (lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (Succ (Zero))) (Succ (lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (mult (Succ (Zero)) y)) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (mult y (Succ (Zero)))) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) (Succ (y))) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (y)) (Succ (Zero))) lf2
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (Succ (mult (Succ (Zero)) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (Succ (mult y (Succ (Zero))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (Zero)) (Succ (y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf2 (mult (Succ (y)) (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (lf2)) (mult (Succ (Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (lf2)) (mult y (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (plus y lf2)) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (plus lf2 y)) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus y (Succ (lf2))) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf2) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus lf2 (Succ (y))) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (plus (Succ (lf2)) y) (Succ (Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf2) (Succ (y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (Succ (Zero))) (Succ (y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (mult (Succ (Zero)) lf2)) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (Succ (mult lf2 (Succ (Zero)))) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) (Succ (lf2))) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (lf2)) (Succ (Zero))) y
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (mult (Succ (Zero)) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (mult lf2 (Succ (Zero))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (mult (Succ (Zero)) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (mult (Succ (Zero)) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult (Succ (Zero)) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult y (Succ (Zero))) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (mult (Succ (Zero)) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (mult y (Succ (Zero))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (mult (plus y lf2) (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (mult (plus lf2 y) (Succ (Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult (Succ (Zero)) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult lf2 (Succ (Zero))) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf2))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf2))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf2))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf2)))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (y))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (y))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (y))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (y)))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Zero))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Zero)))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Zero))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Zero))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (lf1)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf1))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (lf2)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (lf2))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (y)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (y))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Zero)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Zero))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (lf1)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf1)))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (lf2)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (lf2)))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (y)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (y)))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Zero)))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Zero)))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (lf1))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (lf1))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (lf1))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (lf1)))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus Zero (plus lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf2) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult lf2 Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero y) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult y Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult Zero lf1) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (plus Zero lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (mult lf1 Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero lf2) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 Zero) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero y) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero y) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y Zero) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y Zero) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero Zero) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero Zero) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf2)))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf2)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (plus Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf2))))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus y lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf2 y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf2 Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (y)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (y)))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (y)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult y y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus y y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (plus Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (y))))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero y) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y Zero) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus y y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus y Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult y Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (Zero))))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (Zero)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (Zero)))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (lf1))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf1)))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (lf2))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (lf2)))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (y))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (y)))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult Zero (Succ (Succ (Succ (Zero))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult lf1 (Succ (mult (Succ (Succ (Succ (Zero)))) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (lf1))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf1 (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf1))))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf1 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf1 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf1) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf1 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (lf2))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult lf2 (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (lf2))))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus y lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult lf2 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus lf2 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult lf2 Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (y))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult y (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (y))))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult y Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus y y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus y Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult y Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult Zero (Succ (Succ (Succ (Succ (Zero))))))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (mult Zero Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (mult Zero Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (plus Zero Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Succ (Succ (Succ (Zero))))) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero lf1) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult lf2 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult y Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (mult Zero Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus Zero Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 Zero) (plus lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero lf1)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf1 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult lf2 Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult y Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (mult Zero Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus Zero Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult Zero (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Succ (Succ (lf1)))) Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf2 (mult lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult y (mult lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (Succ (Succ (Succ (Succ (lf1)))))) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf2 lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf2 lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult y lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus y lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (mult lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult Zero (plus lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (plus Zero lf1)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (mult lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 Zero)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf2) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 Zero) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero lf2) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult lf2 Zero) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero y) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y Zero) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero y) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult y Zero) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero Zero) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero Zero) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero Zero) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (plus Zero Zero) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf1)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf1 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero lf2)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult lf2 Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero y)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult y Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (mult Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult lf1 (plus Zero Zero)) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf1)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf1 Zero)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero lf2)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult lf2 Zero)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero y)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult y Zero)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (mult Zero Zero)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero Zero)) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (Succ (Succ (Succ (Succ (lf1))))) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf2 lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf2 lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult y lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus y lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult Zero lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus Zero lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf1) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) lf2) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) y) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (mult lf1 Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf1 lf2) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf1 y) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (mult (plus lf1 Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult Zero lf1) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) Zero) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) lf1) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (mult lf1 Zero) Zero) lf1
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) Zero) Zero
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult Zero lf1)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult lf1 Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult Zero lf1) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult lf1 Zero) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult Zero lf1)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult lf1 Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero lf1) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult lf1 Zero) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult Zero lf1))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult lf1 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero lf1) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero lf1) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult lf1 Zero) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult lf1 Zero) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult Zero lf1)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult lf1 Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero lf1)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult lf1 Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero lf1) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero lf1) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult lf1 Zero) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult lf1 Zero) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus Zero (plus Zero lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus Zero (plus lf2 Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero y) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult y Zero) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero Zero) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (plus Zero Zero) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult Zero lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult lf2 Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult Zero y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult y Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (mult Zero Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus lf2 (plus Zero Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero lf2) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (plus Zero lf2) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (mult lf2 Zero) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus y (plus (plus lf2 Zero) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus y (plus Zero lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus y (plus lf2 Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus Zero (plus y lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus Zero (plus lf2 y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus Zero y) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus y Zero) lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf2 (plus Zero y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf2 (plus y Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus y lf2) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus Zero lf2) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus lf2 y) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus lf2 Zero) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero y) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero y) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) (plus Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) (plus lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult y Zero) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult y Zero) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) (plus Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) (plus lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero Zero) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero Zero) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero Zero) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero Zero) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus Zero y)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus y Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero Zero) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero Zero) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero y)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult y Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (plus Zero Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero y) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero y) Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult y Zero) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus y Zero) Zero) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult Zero lf2)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult lf2 Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult Zero lf2) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult lf2 Zero) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus Zero (plus Zero y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus Zero (plus y Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult Zero Zero) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (plus Zero Zero) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult Zero y)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult y Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (mult Zero Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus y (plus Zero Zero)))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult Zero y) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (plus Zero y) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (mult y Zero) y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus lf2 (plus (plus y Zero) Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y lf2) (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero lf2) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult Zero lf2) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf2) (plus Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf2) (plus y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult lf2 Zero) (plus y lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (mult lf2 Zero) (plus lf2 y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult Zero lf2))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult lf2 Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (mult Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 y) (plus Zero Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 Zero) (plus Zero y))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 Zero) (plus y Zero))
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero lf2)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (plus Zero lf2)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (mult lf2 Zero)) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus y (plus lf2 Zero)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus y lf2)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus Zero lf2)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus lf2 y)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus lf2 Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero y) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero y) lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult y Zero) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus y Zero) lf2) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero Zero) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero Zero) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult Zero lf2)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult lf2 Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult Zero y)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (plus Zero y)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult y Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (plus y Zero)) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (mult Zero Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus lf2 (plus Zero Zero)) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus y lf2) Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero lf2) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero lf2) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero lf2) y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero lf2) Zero) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult lf2 Zero) lf2) y)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (mult lf2 Zero) y) lf2)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf2 y) Zero) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf2 Zero) y) Zero)
;;
let synth (y:natural) (lf2:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf2 Zero) Zero) y)
;;
