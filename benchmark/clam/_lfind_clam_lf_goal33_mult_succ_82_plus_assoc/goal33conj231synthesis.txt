let synth (y:natural) (lf1:natural)  =
  plus y (Succ (lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (y)) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (Succ (y))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) y
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 y)
;;
let synth (y:natural) (lf1:natural)  =
  plus y (Succ (plus Zero lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (Succ (plus lf1 Zero))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (plus Zero (Succ (lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (plus (Succ (Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  plus y (plus lf1 (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (plus (Succ (lf1)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  plus Zero (Succ (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus Zero (Succ (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  plus Zero (plus y (Succ (lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  plus Zero (plus (Succ (y)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (Succ (y)))
;;
let synth (y:natural) (lf1:natural)  =
  plus Zero (plus (Succ (lf1)) y)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (y)) (plus Zero lf1)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (y)) (plus lf1 Zero)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (Zero)) (plus y lf1)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (Zero)) (plus lf1 y)
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus Zero y) (Succ (lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus y Zero) (Succ (lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (plus Zero y)) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (plus y Zero)) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus Zero (Succ (y))) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus (Succ (Zero)) y) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus y (Succ (Zero))) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus (Succ (y)) Zero) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (Succ (plus Zero y))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (Succ (plus y Zero))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (Succ (y)))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (plus (Succ (Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (plus y (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (plus (Succ (y)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) (plus Zero y)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) (plus y Zero)
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus y lf1) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (Succ (y))
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus lf1 y) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (Succ (y))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (plus y lf1)) Zero
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (plus Zero lf1)) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (plus lf1 y)) Zero
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (plus lf1 Zero)) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus y (Succ (lf1))) Zero
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus Zero (Succ (lf1))) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus (Succ (y)) lf1) Zero
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus (Succ (Zero)) lf1) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus lf1 (Succ (y))) Zero
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus lf1 (Succ (Zero))) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus (Succ (lf1)) y) Zero
;;
let synth (y:natural) (lf1:natural)  =
  plus (plus (Succ (lf1)) Zero) y
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus Zero lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus Zero y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 Zero) y)
;;
let synth (y:natural) (lf1:natural)  =
  plus y (Succ (mult (Succ (Zero)) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (Succ (mult lf1 (Succ (Zero))))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (mult (Succ (Zero)) (Succ (lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  plus y (mult (Succ (lf1)) (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (y)) (mult (Succ (Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (y)) (mult lf1 (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (Succ (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (Succ (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus y (Succ (lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus (Succ (y)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus lf1 (Succ (y)))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (plus (Succ (lf1)) y)
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) y) (Succ (lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult y (Succ (Zero))) (Succ (lf1))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (mult (Succ (Zero)) y)) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (mult y (Succ (Zero)))) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) (Succ (y))) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) (Succ (Zero))) lf1
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (Succ (mult (Succ (Zero)) y))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (Succ (mult y (Succ (Zero))))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (Zero)) (Succ (y)))
;;
let synth (y:natural) (lf1:natural)  =
  plus lf1 (mult (Succ (y)) (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) (mult (Succ (Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) (mult y (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (plus y lf1)) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  mult (Succ (plus lf1 y)) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  mult (plus y (Succ (lf1))) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) lf1) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  mult (plus lf1 (Succ (y))) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  mult (plus (Succ (lf1)) y) (Succ (Zero))
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) lf1) (Succ (y))
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult lf1 (Succ (Zero))) (Succ (y))
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (mult (Succ (Zero)) lf1)) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (Succ (mult lf1 (Succ (Zero)))) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult (Succ (Zero)) (Succ (lf1))) y
;;
let synth (y:natural) (lf1:natural)  =
  plus (mult (Succ (lf1)) (Succ (Zero))) y
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (mult (Succ (Zero)) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (mult lf1 (Succ (Zero))))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (mult (Succ (Zero)) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (mult (Succ (Zero)) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult (Succ (Zero)) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult y (Succ (Zero))) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (mult (Succ (Zero)) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (mult y (Succ (Zero))))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (mult (plus y lf1) (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (mult (plus lf1 y) (Succ (Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult (Succ (Zero)) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult lf1 (Succ (Zero))) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus Zero (plus Zero lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus Zero (plus lf1 Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero y) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult y Zero) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero Zero) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus Zero Zero) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (mult Zero lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (mult lf1 Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (mult Zero y)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (mult y Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (mult Zero Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (plus Zero Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult Zero lf1) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus Zero lf1) Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult lf1 Zero) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus lf1 Zero) Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus y (plus Zero lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus y (plus lf1 Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus Zero (plus y lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus Zero (plus lf1 y)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus Zero y) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus y Zero) lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf1 (plus Zero y)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf1 (plus y Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus y lf1) Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus Zero lf1) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus lf1 y) Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus lf1 Zero) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult Zero y) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult Zero y) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) (plus Zero lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) (plus lf1 Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult y Zero) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult y Zero) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) (plus Zero lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) (plus lf1 Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult Zero Zero) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult Zero Zero) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero Zero) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero Zero) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus Zero y)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus y Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero Zero) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero Zero) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero y)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult y Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus Zero Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero y) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero y) Zero) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult y Zero) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y Zero) Zero) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (mult Zero lf1)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (mult lf1 Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (mult Zero lf1) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (mult lf1 Zero) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus Zero (plus Zero y)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus Zero (plus y Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (mult Zero Zero) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus Zero Zero) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (mult Zero y)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (mult y Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (mult Zero Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (plus Zero Zero)))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (mult Zero y) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus Zero y) Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (mult y Zero) y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus y Zero) Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (mult Zero lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (mult lf1 Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (mult Zero y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (mult y Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (mult Zero Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (plus Zero Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult Zero lf1) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult Zero lf1) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf1) (plus Zero y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf1) (plus y Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult lf1 Zero) (plus y lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (mult lf1 Zero) (plus lf1 y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (mult Zero lf1))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (mult lf1 Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (mult Zero y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (mult y Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (mult Zero Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (plus Zero Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 Zero) (plus Zero y))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 Zero) (plus y Zero))
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult Zero lf1)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus Zero lf1)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult lf1 Zero)) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus lf1 Zero)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus y lf1)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus Zero lf1)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus lf1 y)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus lf1 Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero y) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero y) lf1) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult y Zero) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y Zero) lf1) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero Zero) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero Zero) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (mult Zero lf1)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (mult lf1 Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (mult Zero y)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus Zero y)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (mult y Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus y Zero)) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (mult Zero Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus Zero Zero)) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y lf1) Zero) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero lf1) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult Zero lf1) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero lf1) y) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero lf1) Zero) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult lf1 Zero) lf1) y)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult lf1 Zero) y) lf1)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 y) Zero) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 Zero) y) Zero)
;;
let synth (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 Zero) Zero) y)
;;
