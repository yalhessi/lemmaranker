let synth (y:natural) (x:natural)  =
  mult (Succ (y)) x
;;
let synth (y:natural) (x:natural)  =
  mult x (Succ (y))
;;
let synth (y:natural) (x:natural)  =
  plus x (mult y x)
;;
let synth (y:natural) (x:natural)  =
  plus x (mult x y)
;;
let synth (y:natural) (x:natural)  =
  plus (mult y x) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult x y) x
;;
let synth (y:natural) (x:natural)  =
  plus Zero (mult (Succ (y)) x)
;;
let synth (y:natural) (x:natural)  =
  plus Zero (mult x (Succ (y)))
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (y)) (plus Zero x)
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (y)) (plus x Zero)
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (plus Zero y)) x
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (plus y Zero)) x
;;
let synth (y:natural) (x:natural)  =
  mult (plus Zero (Succ (y))) x
;;
let synth (y:natural) (x:natural)  =
  mult (plus (Succ (Zero)) y) x
;;
let synth (y:natural) (x:natural)  =
  mult (plus y (Succ (Zero))) x
;;
let synth (y:natural) (x:natural)  =
  mult (plus (Succ (y)) Zero) x
;;
let synth (y:natural) (x:natural)  =
  mult x (Succ (plus Zero y))
;;
let synth (y:natural) (x:natural)  =
  mult x (Succ (plus y Zero))
;;
let synth (y:natural) (x:natural)  =
  mult x (plus Zero (Succ (y)))
;;
let synth (y:natural) (x:natural)  =
  mult x (plus (Succ (Zero)) y)
;;
let synth (y:natural) (x:natural)  =
  mult x (plus y (Succ (Zero)))
;;
let synth (y:natural) (x:natural)  =
  mult x (plus (Succ (y)) Zero)
;;
let synth (y:natural) (x:natural)  =
  mult (plus Zero x) (Succ (y))
;;
let synth (y:natural) (x:natural)  =
  mult (plus x Zero) (Succ (y))
;;
let synth (y:natural) (x:natural)  =
  plus (mult (Succ (y)) x) Zero
;;
let synth (y:natural) (x:natural)  =
  plus (mult x (Succ (y))) Zero
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (y)) (mult (Succ (Zero)) x)
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (y)) (mult x (Succ (Zero)))
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (Zero)) (mult (Succ (y)) x)
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (Zero)) (mult x (Succ (y)))
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (mult (Succ (Zero)) y)) x
;;
let synth (y:natural) (x:natural)  =
  mult (Succ (mult y (Succ (Zero)))) x
;;
let synth (y:natural) (x:natural)  =
  mult (mult (Succ (Zero)) (Succ (y))) x
;;
let synth (y:natural) (x:natural)  =
  mult (mult (Succ (y)) (Succ (Zero))) x
;;
let synth (y:natural) (x:natural)  =
  mult x (Succ (mult (Succ (Zero)) y))
;;
let synth (y:natural) (x:natural)  =
  mult x (Succ (mult y (Succ (Zero))))
;;
let synth (y:natural) (x:natural)  =
  mult x (mult (Succ (Zero)) (Succ (y)))
;;
let synth (y:natural) (x:natural)  =
  mult x (mult (Succ (y)) (Succ (Zero)))
;;
let synth (y:natural) (x:natural)  =
  mult (mult (Succ (y)) x) (Succ (Zero))
;;
let synth (y:natural) (x:natural)  =
  mult (mult (Succ (Zero)) x) (Succ (y))
;;
let synth (y:natural) (x:natural)  =
  mult (mult x (Succ (y))) (Succ (Zero))
;;
let synth (y:natural) (x:natural)  =
  mult (mult x (Succ (Zero))) (Succ (y))
;;
let synth (y:natural) (x:natural)  =
  plus Zero (plus x (mult y x))
;;
let synth (y:natural) (x:natural)  =
  plus Zero (plus x (mult x y))
;;
let synth (y:natural) (x:natural)  =
  plus Zero (plus (mult y x) x)
;;
let synth (y:natural) (x:natural)  =
  plus Zero (plus (mult x y) x)
;;
let synth (y:natural) (x:natural)  =
  plus x (mult y (plus Zero x))
;;
let synth (y:natural) (x:natural)  =
  plus x (mult y (plus x Zero))
;;
let synth (y:natural) (x:natural)  =
  plus x (plus Zero (mult y x))
;;
let synth (y:natural) (x:natural)  =
  plus x (plus Zero (mult x y))
;;
let synth (y:natural) (x:natural)  =
  plus x (mult (plus Zero y) x)
;;
let synth (y:natural) (x:natural)  =
  plus x (mult (plus y Zero) x)
;;
let synth (y:natural) (x:natural)  =
  plus x (mult x (plus Zero y))
;;
let synth (y:natural) (x:natural)  =
  plus x (mult x (plus y Zero))
;;
let synth (y:natural) (x:natural)  =
  plus x (mult (plus Zero x) y)
;;
let synth (y:natural) (x:natural)  =
  plus x (mult (plus x Zero) y)
;;
let synth (y:natural) (x:natural)  =
  plus x (plus (mult y x) Zero)
;;
let synth (y:natural) (x:natural)  =
  plus x (plus (mult x y) Zero)
;;
let synth (y:natural) (x:natural)  =
  plus (mult y x) (plus Zero x)
;;
let synth (y:natural) (x:natural)  =
  plus (mult y x) (plus x Zero)
;;
let synth (y:natural) (x:natural)  =
  plus (plus Zero x) (mult y x)
;;
let synth (y:natural) (x:natural)  =
  plus (plus Zero x) (mult x y)
;;
let synth (y:natural) (x:natural)  =
  plus (mult x y) (plus Zero x)
;;
let synth (y:natural) (x:natural)  =
  plus (mult x y) (plus x Zero)
;;
let synth (y:natural) (x:natural)  =
  plus (plus x Zero) (mult y x)
;;
let synth (y:natural) (x:natural)  =
  plus (plus x Zero) (mult x y)
;;
let synth (y:natural) (x:natural)  =
  plus (mult y (plus Zero x)) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult y (plus x Zero)) x
;;
let synth (y:natural) (x:natural)  =
  plus (plus Zero (mult y x)) x
;;
let synth (y:natural) (x:natural)  =
  plus (plus Zero (mult x y)) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult (plus Zero y) x) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult (plus y Zero) x) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult x (plus Zero y)) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult x (plus y Zero)) x
;;
let synth (y:natural) (x:natural)  =
  plus (plus x (mult y x)) Zero
;;
let synth (y:natural) (x:natural)  =
  plus (plus x (mult x y)) Zero
;;
let synth (y:natural) (x:natural)  =
  plus (mult (plus Zero x) y) x
;;
let synth (y:natural) (x:natural)  =
  plus (mult (plus x Zero) y) x
;;
let synth (y:natural) (x:natural)  =
  plus (plus (mult y x) x) Zero
;;
let synth (y:natural) (x:natural)  =
  plus (plus (mult y x) Zero) x
;;
let synth (y:natural) (x:natural)  =
  plus (plus (mult x y) x) Zero
;;
let synth (y:natural) (x:natural)  =
  plus (plus (mult x y) Zero) x
;;
