let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus y lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x y) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult (Succ (x)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (mult y (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (mult x (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (mult (Succ (y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x (Succ (y))) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (x)) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y (Succ (x))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) x) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus x (plus Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus x (plus lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus Zero (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus Zero (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (plus Zero x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (plus x Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus lf1 (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus lf1 (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (plus x lf1) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (plus Zero lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (plus lf1 x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (plus lf1 Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus y (plus Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus y (plus lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero (plus y lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus Zero (plus lf1 y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus Zero y) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus y Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus y lf1) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus Zero lf1) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus lf1 y) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (plus lf1 Zero) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus y (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus y (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x (plus y lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus x (plus lf1 y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus x y) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus y x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus lf1 (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus y lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus x lf1) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (plus (plus lf1 x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x y) (plus Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x y) (plus lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero y) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero y) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y x) (plus Zero lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y x) (plus lf1 Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y Zero) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y Zero) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) (plus y lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero x) (plus lf1 y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) (plus y lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x Zero) (plus lf1 y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus Zero y)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus y Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus x y)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus y x)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero x) y) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x Zero) y) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (plus Zero x)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (plus x Zero)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x y) Zero) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero y) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus y x) Zero) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus y Zero) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus Zero (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus x Zero) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus y (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus y (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus x y) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus Zero y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus y x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (plus y Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y lf1) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y lf1) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (plus Zero y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (plus y Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero lf1) (plus y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 y) (plus Zero x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 y) (plus x Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (plus Zero y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (plus y Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 Zero) (plus y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (plus x lf1)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (plus Zero lf1)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (plus lf1 x)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (plus lf1 Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus y lf1)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus Zero lf1)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus lf1 y)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (plus lf1 Zero)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus y lf1)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus x lf1)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus Zero (plus lf1 x)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x y) lf1) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero y) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus y x) lf1) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus y Zero) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero x) lf1) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x Zero) lf1) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus x y)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus y x)) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus y Zero)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus Zero x)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (plus x Zero)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus y lf1) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus y lf1) Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x lf1) y) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus x lf1) Zero) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus Zero lf1) x) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 y) x) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 y) Zero) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 x) y) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 x) Zero) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (plus lf1 Zero) x) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus y (mult x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus y (mult y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult x y) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (mult y x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus x (mult x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus x (mult y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (mult x y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (mult y x) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x y) (plus x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x y) (plus y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x y) (mult x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x y) (mult y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y x) (plus x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y x) (plus y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y x) (mult x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y x) (mult y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult x y)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (mult y x)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (mult x y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (mult y x)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult x y) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult x y) x) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y x) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (mult y x) x) y
;;
