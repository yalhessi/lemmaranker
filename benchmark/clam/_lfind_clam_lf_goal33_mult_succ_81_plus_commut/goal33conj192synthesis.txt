let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (Succ (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (Succ (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus x (Succ (lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (Succ (x)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus lf1 (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (plus (Succ (lf1)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (Succ (plus y lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (Succ (plus lf1 y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus y (Succ (lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (Succ (y)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus lf1 (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (plus (Succ (lf1)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (y)) (plus x lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (y)) (plus lf1 x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (x)) (plus y lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (x)) (plus lf1 y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x y) (Succ (lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y x) (Succ (lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (plus x y)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (plus y x)) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (Succ (y))) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (Succ (x)) y) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (Succ (x))) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (Succ (y)) x) lf1
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (Succ (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (Succ (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus x (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (Succ (x)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus y (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus lf1 (plus (Succ (y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) (plus x y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (lf1)) (plus y x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y lf1) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x lf1) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 y) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 x) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (plus y lf1)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (plus x lf1)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (plus lf1 y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (plus lf1 x)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus y (Succ (lf1))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus x (Succ (lf1))) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (Succ (y)) lf1) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (Succ (x)) lf1) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (Succ (y))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus lf1 (Succ (x))) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (Succ (lf1)) y) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (plus (Succ (lf1)) x) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus y lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus lf1 y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x y) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x lf1) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (Succ (mult (Succ (x)) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus x (Succ (mult y (Succ (x))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (x)) (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus Zero (mult (Succ (y)) (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (Succ (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (Succ (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (plus Zero (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (plus (Succ (Zero)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (plus y (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (plus (Succ (y)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (x)) (mult (Succ (x)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (x)) (mult y (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero x)) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus x Zero)) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (x))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) x) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus x (Succ (Zero))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (x)) Zero) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (Succ (mult x (Succ (y))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus y (Succ (mult (Succ (y)) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (Succ (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (Succ (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus Zero (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus (Succ (Zero)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus x (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (plus (Succ (x)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (y)) (mult x (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (y)) (mult (Succ (y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus Zero y)) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (plus y Zero)) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus Zero (Succ (y))) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (Zero)) y) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus y (Succ (Zero))) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (plus (Succ (y)) Zero) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult x (Succ (y))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (x)) y) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult y (Succ (x))) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) x) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (mult x (Succ (y)))) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (mult (Succ (x)) y)) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (mult y (Succ (x)))) x
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (Succ (mult (Succ (y)) x)) y
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (x)) (Succ (y))) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  plus (mult (Succ (y)) (Succ (x))) Zero
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (mult (Succ (x)) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (mult y (Succ (x))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (mult x (Succ (y))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (mult (Succ (y)) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult x (Succ (y))) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult (Succ (x)) y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult y (Succ (x))) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult (Succ (y)) x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (Succ (mult (Succ (Zero)) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (Succ (mult y (Succ (Zero))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (mult (Succ (Zero)) (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (x)) (mult (Succ (y)) (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (x)) (Succ (y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (Zero)) (mult (Succ (y)) (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) x)) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult x (Succ (Zero)))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (x))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (x)) (Succ (Zero))) (Succ (y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (Succ (mult (Succ (Zero)) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (Succ (mult x (Succ (Zero))))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (Zero)) (Succ (x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (y)) (mult (Succ (x)) (Succ (Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult (Succ (Zero)) y)) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (Succ (mult y (Succ (Zero)))) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (x)) (Succ (y))) (Succ (Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (Zero)) (Succ (y))) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (x))) (Succ (Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  mult (mult (Succ (y)) (Succ (Zero))) (Succ (x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus x (plus Zero lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus x (plus lf1 Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus Zero (plus x lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus Zero (plus lf1 x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus Zero x) lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus x Zero) lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (plus Zero x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus lf1 (plus x Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus x lf1) Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus Zero lf1) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus lf1 x) Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (plus lf1 Zero) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus y (plus Zero lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus y (plus lf1 Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus Zero (plus y lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus Zero (plus lf1 y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (plus Zero y) lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (plus y Zero) lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus lf1 (plus Zero y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus lf1 (plus y Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (plus y lf1) Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (plus Zero lf1) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (plus lf1 y) Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (plus lf1 Zero) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus y (plus x lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus y (plus lf1 x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus x (plus y lf1)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus x (plus lf1 y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus x y) lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus y x) lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf1 (plus x y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus lf1 (plus y x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus y lf1) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus x lf1) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus lf1 y) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus Zero (plus (plus lf1 x) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x y) (plus Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x y) (plus lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero y) (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y x) (plus Zero lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y x) (plus lf1 Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) (plus x lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y Zero) (plus lf1 x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero x) (plus y lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero x) (plus lf1 y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x Zero) (plus y lf1))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x Zero) (plus lf1 y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (plus Zero y)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (plus y Zero)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus x y)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus y x)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero x) y) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus x Zero) y) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus Zero x)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus x Zero)) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus x y) Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero y) x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y x) Zero) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y Zero) x) lf1)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus x (plus Zero y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus x (plus y Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus Zero (plus x y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus Zero (plus y x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus Zero x) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus x Zero) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (plus Zero x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus y (plus x Zero)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus x y) Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus Zero y) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus y x) Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus lf1 (plus (plus y Zero) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y lf1) (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x lf1) (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x lf1) (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf1) (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero lf1) (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (plus Zero x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 y) (plus x Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 x) (plus Zero y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 x) (plus y Zero))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 Zero) (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 Zero) (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus x lf1)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus Zero lf1)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus lf1 x)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (plus lf1 Zero)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (plus y lf1)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (plus Zero lf1)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (plus lf1 y)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (plus lf1 Zero)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus y lf1)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus x lf1)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus lf1 y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus Zero (plus lf1 x)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus x y) lf1) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero y) lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y x) lf1) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y Zero) lf1) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero x) lf1) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus x Zero) lf1) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus x y)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus Zero y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus y x)) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus y Zero)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus Zero x)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus lf1 (plus x Zero)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y lf1) x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus y lf1) Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus x lf1) y) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus x lf1) Zero) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero lf1) y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus Zero lf1) x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 y) x) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 y) Zero) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 x) y) Zero)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 x) Zero) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 Zero) y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (plus lf1 Zero) x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus y (mult x y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus y (mult y x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (mult x y) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus x (plus (mult y x) y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus x (mult x y)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus x (mult y x)))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult x y) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus y (plus (mult y x) x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult x y) (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult x y) (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x y) (mult x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x y) (mult y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult y x) (plus x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (mult y x) (plus y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y x) (mult x y))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y x) (mult y x))
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (mult x y)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus x (mult y x)) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult x y)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus y (mult y x)) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult x y) y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult x y) x) y)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult y x) y) x)
;;
let synth (x:natural) (y:natural) (lf1:natural)  =
  Succ (plus (plus (mult y x) x) y)
;;
